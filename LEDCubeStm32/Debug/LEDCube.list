
LEDCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000546c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08005600  08005600  00006600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c8  080057c8  00007114  2**0
                  CONTENTS
  4 .ARM          00000008  080057c8  080057c8  000067c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057d0  080057d0  00007114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057d0  080057d0  000067d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057d4  080057d4  000067d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  20000000  080057d8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000114  080058ec  00007114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  080058ec  000073c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d774  00000000  00000000  00007144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e50  00000000  00000000  000148b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00016708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a04  00000000  00000000  000173b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001645d  00000000  00000000  00017db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2e1  00000000  00000000  0002e211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da73  00000000  00000000  0003d4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000caf65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d4  00000000  00000000  000cafa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000ce57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000114 	.word	0x20000114
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080055e8 	.word	0x080055e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000118 	.word	0x20000118
 80001d0:	080055e8 	.word	0x080055e8

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295
 8000208:	f04f 30ff 	movne.w	r0, #4294967295
 800020c:	f000 b96a 	b.w	80004e4 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9d08      	ldr	r5, [sp, #32]
 800022e:	460c      	mov	r4, r1
 8000230:	2b00      	cmp	r3, #0
 8000232:	d14e      	bne.n	80002d2 <__udivmoddi4+0xaa>
 8000234:	4694      	mov	ip, r2
 8000236:	458c      	cmp	ip, r1
 8000238:	4686      	mov	lr, r0
 800023a:	fab2 f282 	clz	r2, r2
 800023e:	d962      	bls.n	8000306 <__udivmoddi4+0xde>
 8000240:	b14a      	cbz	r2, 8000256 <__udivmoddi4+0x2e>
 8000242:	f1c2 0320 	rsb	r3, r2, #32
 8000246:	4091      	lsls	r1, r2
 8000248:	fa20 f303 	lsr.w	r3, r0, r3
 800024c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000250:	4319      	orrs	r1, r3
 8000252:	fa00 fe02 	lsl.w	lr, r0, r2
 8000256:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025a:	fa1f f68c 	uxth.w	r6, ip
 800025e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000262:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000266:	fb07 1114 	mls	r1, r7, r4, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb04 f106 	mul.w	r1, r4, r6
 8000272:	4299      	cmp	r1, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x64>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f104 30ff 	add.w	r0, r4, #4294967295
 800027e:	f080 8112 	bcs.w	80004a6 <__udivmoddi4+0x27e>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 810f 	bls.w	80004a6 <__udivmoddi4+0x27e>
 8000288:	3c02      	subs	r4, #2
 800028a:	4463      	add	r3, ip
 800028c:	1a59      	subs	r1, r3, r1
 800028e:	fa1f f38e 	uxth.w	r3, lr
 8000292:	fbb1 f0f7 	udiv	r0, r1, r7
 8000296:	fb07 1110 	mls	r1, r7, r0, r1
 800029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029e:	fb00 f606 	mul.w	r6, r0, r6
 80002a2:	429e      	cmp	r6, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x94>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ae:	f080 80fc 	bcs.w	80004aa <__udivmoddi4+0x282>
 80002b2:	429e      	cmp	r6, r3
 80002b4:	f240 80f9 	bls.w	80004aa <__udivmoddi4+0x282>
 80002b8:	4463      	add	r3, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	1b9b      	subs	r3, r3, r6
 80002be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa6>
 80002c6:	40d3      	lsrs	r3, r2
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xba>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb4>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa6>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x150>
 80002ea:	42a3      	cmp	r3, r4
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xcc>
 80002ee:	4290      	cmp	r0, r2
 80002f0:	f0c0 80f0 	bcc.w	80004d4 <__udivmoddi4+0x2ac>
 80002f4:	1a86      	subs	r6, r0, r2
 80002f6:	eb64 0303 	sbc.w	r3, r4, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	2d00      	cmp	r5, #0
 80002fe:	d0e6      	beq.n	80002ce <__udivmoddi4+0xa6>
 8000300:	e9c5 6300 	strd	r6, r3, [r5]
 8000304:	e7e3      	b.n	80002ce <__udivmoddi4+0xa6>
 8000306:	2a00      	cmp	r2, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x204>
 800030c:	eba1 040c 	sub.w	r4, r1, ip
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	fa1f f78c 	uxth.w	r7, ip
 8000318:	2101      	movs	r1, #1
 800031a:	fbb4 f6f8 	udiv	r6, r4, r8
 800031e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000322:	fb08 4416 	mls	r4, r8, r6, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb07 f006 	mul.w	r0, r7, r6
 800032e:	4298      	cmp	r0, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x11c>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f106 34ff 	add.w	r4, r6, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x11a>
 800033c:	4298      	cmp	r0, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2b4>
 8000342:	4626      	mov	r6, r4
 8000344:	1a1c      	subs	r4, r3, r0
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb4 f0f8 	udiv	r0, r4, r8
 800034e:	fb08 4410 	mls	r4, r8, r0, r4
 8000352:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000356:	fb00 f707 	mul.w	r7, r0, r7
 800035a:	429f      	cmp	r7, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x148>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 34ff 	add.w	r4, r0, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x146>
 8000368:	429f      	cmp	r7, r3
 800036a:	f200 80b0 	bhi.w	80004ce <__udivmoddi4+0x2a6>
 800036e:	4620      	mov	r0, r4
 8000370:	1bdb      	subs	r3, r3, r7
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x9c>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa20 fc06 	lsr.w	ip, r0, r6
 8000388:	fa04 f301 	lsl.w	r3, r4, r1
 800038c:	ea43 030c 	orr.w	r3, r3, ip
 8000390:	40f4      	lsrs	r4, r6
 8000392:	fa00 f801 	lsl.w	r8, r0, r1
 8000396:	0c38      	lsrs	r0, r7, #16
 8000398:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800039c:	fbb4 fef0 	udiv	lr, r4, r0
 80003a0:	fa1f fc87 	uxth.w	ip, r7
 80003a4:	fb00 441e 	mls	r4, r0, lr, r4
 80003a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ac:	fb0e f90c 	mul.w	r9, lr, ip
 80003b0:	45a1      	cmp	r9, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x1a6>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003be:	f080 8084 	bcs.w	80004ca <__udivmoddi4+0x2a2>
 80003c2:	45a1      	cmp	r9, r4
 80003c4:	f240 8081 	bls.w	80004ca <__udivmoddi4+0x2a2>
 80003c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	eba4 0409 	sub.w	r4, r4, r9
 80003d2:	fa1f f983 	uxth.w	r9, r3
 80003d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003da:	fb00 4413 	mls	r4, r0, r3, r4
 80003de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d907      	bls.n	80003fa <__udivmoddi4+0x1d2>
 80003ea:	193c      	adds	r4, r7, r4
 80003ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f0:	d267      	bcs.n	80004c2 <__udivmoddi4+0x29a>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0x29a>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000402:	eba4 040c 	sub.w	r4, r4, ip
 8000406:	429c      	cmp	r4, r3
 8000408:	46ce      	mov	lr, r9
 800040a:	469c      	mov	ip, r3
 800040c:	d351      	bcc.n	80004b2 <__udivmoddi4+0x28a>
 800040e:	d04e      	beq.n	80004ae <__udivmoddi4+0x286>
 8000410:	b155      	cbz	r5, 8000428 <__udivmoddi4+0x200>
 8000412:	ebb8 030e 	subs.w	r3, r8, lr
 8000416:	eb64 040c 	sbc.w	r4, r4, ip
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	40cb      	lsrs	r3, r1
 8000420:	431e      	orrs	r6, r3
 8000422:	40cc      	lsrs	r4, r1
 8000424:	e9c5 6400 	strd	r6, r4, [r5]
 8000428:	2100      	movs	r1, #0
 800042a:	e750      	b.n	80002ce <__udivmoddi4+0xa6>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f103 	lsr.w	r1, r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa24 f303 	lsr.w	r3, r4, r3
 800043c:	4094      	lsls	r4, r2
 800043e:	430c      	orrs	r4, r1
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	fa00 fe02 	lsl.w	lr, r0, r2
 8000448:	fa1f f78c 	uxth.w	r7, ip
 800044c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000450:	fb08 3110 	mls	r1, r8, r0, r3
 8000454:	0c23      	lsrs	r3, r4, #16
 8000456:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045a:	fb00 f107 	mul.w	r1, r0, r7
 800045e:	4299      	cmp	r1, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x24c>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 36ff 	add.w	r6, r0, #4294967295
 800046a:	d22c      	bcs.n	80004c6 <__udivmoddi4+0x29e>
 800046c:	4299      	cmp	r1, r3
 800046e:	d92a      	bls.n	80004c6 <__udivmoddi4+0x29e>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a5b      	subs	r3, r3, r1
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb3 f1f8 	udiv	r1, r3, r8
 800047c:	fb08 3311 	mls	r3, r8, r1, r3
 8000480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000484:	fb01 f307 	mul.w	r3, r1, r7
 8000488:	42a3      	cmp	r3, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x276>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f101 36ff 	add.w	r6, r1, #4294967295
 8000494:	d213      	bcs.n	80004be <__udivmoddi4+0x296>
 8000496:	42a3      	cmp	r3, r4
 8000498:	d911      	bls.n	80004be <__udivmoddi4+0x296>
 800049a:	3902      	subs	r1, #2
 800049c:	4464      	add	r4, ip
 800049e:	1ae4      	subs	r4, r4, r3
 80004a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a4:	e739      	b.n	800031a <__udivmoddi4+0xf2>
 80004a6:	4604      	mov	r4, r0
 80004a8:	e6f0      	b.n	800028c <__udivmoddi4+0x64>
 80004aa:	4608      	mov	r0, r1
 80004ac:	e706      	b.n	80002bc <__udivmoddi4+0x94>
 80004ae:	45c8      	cmp	r8, r9
 80004b0:	d2ae      	bcs.n	8000410 <__udivmoddi4+0x1e8>
 80004b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7a8      	b.n	8000410 <__udivmoddi4+0x1e8>
 80004be:	4631      	mov	r1, r6
 80004c0:	e7ed      	b.n	800049e <__udivmoddi4+0x276>
 80004c2:	4603      	mov	r3, r0
 80004c4:	e799      	b.n	80003fa <__udivmoddi4+0x1d2>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e7d4      	b.n	8000474 <__udivmoddi4+0x24c>
 80004ca:	46d6      	mov	lr, sl
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1a6>
 80004ce:	4463      	add	r3, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e74d      	b.n	8000370 <__udivmoddi4+0x148>
 80004d4:	4606      	mov	r6, r0
 80004d6:	4623      	mov	r3, r4
 80004d8:	4608      	mov	r0, r1
 80004da:	e70f      	b.n	80002fc <__udivmoddi4+0xd4>
 80004dc:	3e02      	subs	r6, #2
 80004de:	4463      	add	r3, ip
 80004e0:	e730      	b.n	8000344 <__udivmoddi4+0x11c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <flickerOn>:
    }
    return NULL;
}
//flicker on
void flickerOn()
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  int i = 150;
 80004ee:	2396      	movs	r3, #150	@ 0x96
 80004f0:	607b      	str	r3, [r7, #4]
  while(i != 0)
 80004f2:	e00e      	b.n	8000512 <flickerOn+0x2a>
  {
    enableAllPins();
 80004f4:	f000 f868 	bl	80005c8 <enableAllPins>
    HAL_Delay(i);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fcd8 	bl	8002eb0 <HAL_Delay>
    disableAllPins();
 8000500:	f000 f810 	bl	8000524 <disableAllPins>
    HAL_Delay(i);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fcd2 	bl	8002eb0 <HAL_Delay>
    i-= 5;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3b05      	subs	r3, #5
 8000510:	607b      	str	r3, [r7, #4]
  while(i != 0)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1ed      	bne.n	80004f4 <flickerOn+0xc>
  }
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <disableAllPins>:


void disableAllPins() {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
    for (int i = 0; i < mapSize; i++) {
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	e018      	b.n	8000562 <disableAllPins+0x3e>
        HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000530:	4921      	ldr	r1, [pc, #132]	@ (80005b8 <disableAllPins+0x94>)
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	4613      	mov	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	4413      	add	r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	440b      	add	r3, r1
 800053e:	3304      	adds	r3, #4
 8000540:	6818      	ldr	r0, [r3, #0]
 8000542:	491d      	ldr	r1, [pc, #116]	@ (80005b8 <disableAllPins+0x94>)
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4613      	mov	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4413      	add	r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	440b      	add	r3, r1
 8000550:	3308      	adds	r3, #8
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	2201      	movs	r2, #1
 8000556:	4619      	mov	r1, r3
 8000558:	f002 fff6 	bl	8003548 <HAL_GPIO_WritePin>
    for (int i = 0; i < mapSize; i++) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3301      	adds	r3, #1
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b16      	ldr	r3, [pc, #88]	@ (80005bc <disableAllPins+0x98>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	429a      	cmp	r2, r3
 800056a:	dbe1      	blt.n	8000530 <disableAllPins+0xc>
    }

    for(int i = 0; i < layersSize; i++) {
 800056c:	2300      	movs	r3, #0
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	e018      	b.n	80005a4 <disableAllPins+0x80>
    	HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_RESET);
 8000572:	4913      	ldr	r1, [pc, #76]	@ (80005c0 <disableAllPins+0x9c>)
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	4613      	mov	r3, r2
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	4413      	add	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	440b      	add	r3, r1
 8000580:	3304      	adds	r3, #4
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	490e      	ldr	r1, [pc, #56]	@ (80005c0 <disableAllPins+0x9c>)
 8000586:	683a      	ldr	r2, [r7, #0]
 8000588:	4613      	mov	r3, r2
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	4413      	add	r3, r2
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	440b      	add	r3, r1
 8000592:	3308      	adds	r3, #8
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	2200      	movs	r2, #0
 8000598:	4619      	mov	r1, r3
 800059a:	f002 ffd5 	bl	8003548 <HAL_GPIO_WritePin>
    for(int i = 0; i < layersSize; i++) {
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <disableAllPins+0xa0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	dbe1      	blt.n	8000572 <disableAllPins+0x4e>
    }
}
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000000 	.word	0x20000000
 80005bc:	200000f0 	.word	0x200000f0
 80005c0:	200000c0 	.word	0x200000c0
 80005c4:	200000f4 	.word	0x200000f4

080005c8 <enableAllPins>:

void enableAllPins() {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
    for (int i = 0; i < mapSize; i++) {
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	e018      	b.n	8000606 <enableAllPins+0x3e>
        HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 80005d4:	4921      	ldr	r1, [pc, #132]	@ (800065c <enableAllPins+0x94>)
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	4613      	mov	r3, r2
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	4413      	add	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	3304      	adds	r3, #4
 80005e4:	6818      	ldr	r0, [r3, #0]
 80005e6:	491d      	ldr	r1, [pc, #116]	@ (800065c <enableAllPins+0x94>)
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	4613      	mov	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	440b      	add	r3, r1
 80005f4:	3308      	adds	r3, #8
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	2200      	movs	r2, #0
 80005fa:	4619      	mov	r1, r3
 80005fc:	f002 ffa4 	bl	8003548 <HAL_GPIO_WritePin>
    for (int i = 0; i < mapSize; i++) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3301      	adds	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <enableAllPins+0x98>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	429a      	cmp	r2, r3
 800060e:	dbe1      	blt.n	80005d4 <enableAllPins+0xc>
    }

    for(int i = 0; i < layersSize; i++) {
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	e018      	b.n	8000648 <enableAllPins+0x80>
    	HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_SET);
 8000616:	4913      	ldr	r1, [pc, #76]	@ (8000664 <enableAllPins+0x9c>)
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	4613      	mov	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4413      	add	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	440b      	add	r3, r1
 8000624:	3304      	adds	r3, #4
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	490e      	ldr	r1, [pc, #56]	@ (8000664 <enableAllPins+0x9c>)
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	440b      	add	r3, r1
 8000636:	3308      	adds	r3, #8
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	2201      	movs	r2, #1
 800063c:	4619      	mov	r1, r3
 800063e:	f002 ff83 	bl	8003548 <HAL_GPIO_WritePin>
    for(int i = 0; i < layersSize; i++) {
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <enableAllPins+0xa0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	429a      	cmp	r2, r3
 8000650:	dbe1      	blt.n	8000616 <enableAllPins+0x4e>
    }
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000000 	.word	0x20000000
 8000660:	200000f0 	.word	0x200000f0
 8000664:	200000c0 	.word	0x200000c0
 8000668:	200000f4 	.word	0x200000f4

0800066c <turnColumnsOff>:
//turn columns off
void turnColumnsOff() {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0

	for (int i = 0; i < mapSize; i++) {
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	e018      	b.n	80006aa <turnColumnsOff+0x3e>
	        HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000678:	4911      	ldr	r1, [pc, #68]	@ (80006c0 <turnColumnsOff+0x54>)
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	440b      	add	r3, r1
 8000686:	3304      	adds	r3, #4
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	490d      	ldr	r1, [pc, #52]	@ (80006c0 <turnColumnsOff+0x54>)
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4613      	mov	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4413      	add	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	440b      	add	r3, r1
 8000698:	3308      	adds	r3, #8
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	f002 ff52 	bl	8003548 <HAL_GPIO_WritePin>
	for (int i = 0; i < mapSize; i++) {
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3301      	adds	r3, #1
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <turnColumnsOff+0x58>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dbe1      	blt.n	8000678 <turnColumnsOff+0xc>
	    }

}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000000 	.word	0x20000000
 80006c4:	200000f0 	.word	0x200000f0

080006c8 <turnOnAndOffAllByLayerUpAndDownNotTimed>:


void turnOnAndOffAllByLayerUpAndDownNotTimed()
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
  int x = 75;
 80006ce:	234b      	movs	r3, #75	@ 0x4b
 80006d0:	603b      	str	r3, [r7, #0]
  for(int i = 5; i != 0; i--)
 80006d2:	2305      	movs	r3, #5
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	e09a      	b.n	800080e <turnOnAndOffAllByLayerUpAndDownNotTimed+0x146>
  {
    enableAllPins();
 80006d8:	f7ff ff76 	bl	80005c8 <enableAllPins>
    for(int i = layersSize; i!=0; i--)
 80006dc:	4b50      	ldr	r3, [pc, #320]	@ (8000820 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x158>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	e01e      	b.n	8000722 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x5a>
    {
    	HAL_GPIO_WritePin(layers[i-1].port, layers[i-1].pin, GPIO_PIN_RESET);
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	1e5a      	subs	r2, r3, #1
 80006e8:	494e      	ldr	r1, [pc, #312]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 80006ea:	4613      	mov	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4413      	add	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	3304      	adds	r3, #4
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	1e5a      	subs	r2, r3, #1
 80006fc:	4949      	ldr	r1, [pc, #292]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 80006fe:	4613      	mov	r3, r2
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4413      	add	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	440b      	add	r3, r1
 8000708:	3308      	adds	r3, #8
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	2200      	movs	r2, #0
 800070e:	4619      	mov	r1, r3
 8000710:	f002 ff1a 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fbca 	bl	8002eb0 <HAL_Delay>
    for(int i = layersSize; i!=0; i--)
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	3b01      	subs	r3, #1
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1dd      	bne.n	80006e4 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x1c>
    }
    for(int i = 0; i< layersSize; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	e01c      	b.n	8000768 <turnOnAndOffAllByLayerUpAndDownNotTimed+0xa0>
    {
    	HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_SET);
 800072e:	493d      	ldr	r1, [pc, #244]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	4613      	mov	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	440b      	add	r3, r1
 800073c:	3304      	adds	r3, #4
 800073e:	6818      	ldr	r0, [r3, #0]
 8000740:	4938      	ldr	r1, [pc, #224]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	440b      	add	r3, r1
 800074e:	3308      	adds	r3, #8
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	f002 fef7 	bl	8003548 <HAL_GPIO_WritePin>
    	    	HAL_Delay(x);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f002 fba7 	bl	8002eb0 <HAL_Delay>
    for(int i = 0; i< layersSize; i++)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	4b2d      	ldr	r3, [pc, #180]	@ (8000820 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x158>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	429a      	cmp	r2, r3
 8000770:	dbdd      	blt.n	800072e <turnOnAndOffAllByLayerUpAndDownNotTimed+0x66>
    }
      for(int i = 0; i<layersSize; i++)
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	e01c      	b.n	80007b2 <turnOnAndOffAllByLayerUpAndDownNotTimed+0xea>
    {
    	  HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_RESET);
 8000778:	492a      	ldr	r1, [pc, #168]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	440b      	add	r3, r1
 8000786:	3304      	adds	r3, #4
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	4926      	ldr	r1, [pc, #152]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 800078c:	68ba      	ldr	r2, [r7, #8]
 800078e:	4613      	mov	r3, r2
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4413      	add	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	440b      	add	r3, r1
 8000798:	3308      	adds	r3, #8
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	f002 fed2 	bl	8003548 <HAL_GPIO_WritePin>
    	      	    	HAL_Delay(x);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fb82 	bl	8002eb0 <HAL_Delay>
      for(int i = 0; i<layersSize; i++)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	3301      	adds	r3, #1
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x158>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	dbdd      	blt.n	8000778 <turnOnAndOffAllByLayerUpAndDownNotTimed+0xb0>
    }
    for(int i = layersSize; i!=0; i--)
 80007bc:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x158>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	e01e      	b.n	8000802 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x13a>
    {
    	HAL_GPIO_WritePin(layers[i-1].port, layers[i-1].pin, GPIO_PIN_SET);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	1e5a      	subs	r2, r3, #1
 80007c8:	4916      	ldr	r1, [pc, #88]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	440b      	add	r3, r1
 80007d4:	3304      	adds	r3, #4
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	4911      	ldr	r1, [pc, #68]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 80007de:	4613      	mov	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	3308      	adds	r3, #8
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	2201      	movs	r2, #1
 80007ee:	4619      	mov	r1, r3
 80007f0:	f002 feaa 	bl	8003548 <HAL_GPIO_WritePin>
    	    	HAL_Delay(x);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fb5a 	bl	8002eb0 <HAL_Delay>
    for(int i = layersSize; i!=0; i--)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1dd      	bne.n	80007c4 <turnOnAndOffAllByLayerUpAndDownNotTimed+0xfc>
  for(int i = 5; i != 0; i--)
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	3b01      	subs	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	2b00      	cmp	r3, #0
 8000812:	f47f af61 	bne.w	80006d8 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x10>
    }
  }
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000f4 	.word	0x200000f4
 8000824:	200000c0 	.word	0x200000c0

08000828 <turnOnAndOffAllByColumnSideways>:

//turn everything on and off by column sideways
void turnOnAndOffAllByColumnSideways()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	@ 0x50
 800082c:	af00      	add	r7, sp, #0
  int x = 75;
 800082e:	234b      	movs	r3, #75	@ 0x4b
 8000830:	607b      	str	r3, [r7, #4]
  disableAllPins();
 8000832:	f7ff fe77 	bl	8000524 <disableAllPins>
  //turn on layers
  for(int i = 0; i<layersSize; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800083a:	e018      	b.n	800086e <turnOnAndOffAllByColumnSideways+0x46>
  {
	  HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_SET);
 800083c:	49af      	ldr	r1, [pc, #700]	@ (8000afc <turnOnAndOffAllByColumnSideways+0x2d4>)
 800083e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000840:	4613      	mov	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4413      	add	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	440b      	add	r3, r1
 800084a:	3304      	adds	r3, #4
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	49ab      	ldr	r1, [pc, #684]	@ (8000afc <turnOnAndOffAllByColumnSideways+0x2d4>)
 8000850:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	440b      	add	r3, r1
 800085c:	3308      	adds	r3, #8
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	4619      	mov	r1, r3
 8000864:	f002 fe70 	bl	8003548 <HAL_GPIO_WritePin>
  for(int i = 0; i<layersSize; i++)
 8000868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800086a:	3301      	adds	r3, #1
 800086c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800086e:	4ba4      	ldr	r3, [pc, #656]	@ (8000b00 <turnOnAndOffAllByColumnSideways+0x2d8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000874:	429a      	cmp	r2, r3
 8000876:	dbe1      	blt.n	800083c <turnOnAndOffAllByColumnSideways+0x14>
  }
  for(int y = 0; y<3; y++)
 8000878:	2300      	movs	r3, #0
 800087a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800087c:	e239      	b.n	8000cf2 <turnOnAndOffAllByColumnSideways+0x4ca>
  {
    //turn on 0-3
    for(int i = 0; i<4; i++)
 800087e:	2300      	movs	r3, #0
 8000880:	647b      	str	r3, [r7, #68]	@ 0x44
 8000882:	e01c      	b.n	80008be <turnOnAndOffAllByColumnSideways+0x96>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8000884:	499f      	ldr	r1, [pc, #636]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000886:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000888:	4613      	mov	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	4413      	add	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	440b      	add	r3, r1
 8000892:	3304      	adds	r3, #4
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	499b      	ldr	r1, [pc, #620]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800089a:	4613      	mov	r3, r2
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	4413      	add	r3, r2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	440b      	add	r3, r1
 80008a4:	3308      	adds	r3, #8
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	2200      	movs	r2, #0
 80008aa:	4619      	mov	r1, r3
 80008ac:	f002 fe4c 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 fafc 	bl	8002eb0 <HAL_Delay>
    for(int i = 0; i<4; i++)
 80008b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80008ba:	3301      	adds	r3, #1
 80008bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80008be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	dddf      	ble.n	8000884 <turnOnAndOffAllByColumnSideways+0x5c>
    }
    //turn on 4-7
    for(int i = 4; i<8; i++)
 80008c4:	2304      	movs	r3, #4
 80008c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80008c8:	e01c      	b.n	8000904 <turnOnAndOffAllByColumnSideways+0xdc>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 80008ca:	498e      	ldr	r1, [pc, #568]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 80008cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	440b      	add	r3, r1
 80008d8:	3304      	adds	r3, #4
 80008da:	6818      	ldr	r0, [r3, #0]
 80008dc:	4989      	ldr	r1, [pc, #548]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 80008de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80008e0:	4613      	mov	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4413      	add	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	440b      	add	r3, r1
 80008ea:	3308      	adds	r3, #8
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	2200      	movs	r2, #0
 80008f0:	4619      	mov	r1, r3
 80008f2:	f002 fe29 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fad9 	bl	8002eb0 <HAL_Delay>
    for(int i = 4; i<8; i++)
 80008fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000900:	3301      	adds	r3, #1
 8000902:	643b      	str	r3, [r7, #64]	@ 0x40
 8000904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000906:	2b07      	cmp	r3, #7
 8000908:	dddf      	ble.n	80008ca <turnOnAndOffAllByColumnSideways+0xa2>
    }
    //turn on 8-11
    for(int i = 8; i<12; i++)
 800090a:	2308      	movs	r3, #8
 800090c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800090e:	e01c      	b.n	800094a <turnOnAndOffAllByColumnSideways+0x122>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8000910:	497c      	ldr	r1, [pc, #496]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000912:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	440b      	add	r3, r1
 800091e:	3304      	adds	r3, #4
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	4978      	ldr	r1, [pc, #480]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000924:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000926:	4613      	mov	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	440b      	add	r3, r1
 8000930:	3308      	adds	r3, #8
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	2200      	movs	r2, #0
 8000936:	4619      	mov	r1, r3
 8000938:	f002 fe06 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fab6 	bl	8002eb0 <HAL_Delay>
    for(int i = 8; i<12; i++)
 8000944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000946:	3301      	adds	r3, #1
 8000948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800094a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800094c:	2b0b      	cmp	r3, #11
 800094e:	dddf      	ble.n	8000910 <turnOnAndOffAllByColumnSideways+0xe8>
    }
    //turn on 12-15
    for(int i = 12; i<16; i++)
 8000950:	230c      	movs	r3, #12
 8000952:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000954:	e01c      	b.n	8000990 <turnOnAndOffAllByColumnSideways+0x168>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8000956:	496b      	ldr	r1, [pc, #428]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000958:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	440b      	add	r3, r1
 8000964:	3304      	adds	r3, #4
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	4966      	ldr	r1, [pc, #408]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 800096a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800096c:	4613      	mov	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	440b      	add	r3, r1
 8000976:	3308      	adds	r3, #8
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	2200      	movs	r2, #0
 800097c:	4619      	mov	r1, r3
 800097e:	f002 fde3 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fa93 	bl	8002eb0 <HAL_Delay>
    for(int i = 12; i<16; i++)
 800098a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800098c:	3301      	adds	r3, #1
 800098e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000992:	2b0f      	cmp	r3, #15
 8000994:	dddf      	ble.n	8000956 <turnOnAndOffAllByColumnSideways+0x12e>
    }
    //turn off 0-3
    for(int i = 0; i<4; i++)
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
 800099a:	e01c      	b.n	80009d6 <turnOnAndOffAllByColumnSideways+0x1ae>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 800099c:	4959      	ldr	r1, [pc, #356]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 800099e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	440b      	add	r3, r1
 80009aa:	3304      	adds	r3, #4
 80009ac:	6818      	ldr	r0, [r3, #0]
 80009ae:	4955      	ldr	r1, [pc, #340]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 80009b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80009b2:	4613      	mov	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	440b      	add	r3, r1
 80009bc:	3308      	adds	r3, #8
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	2201      	movs	r2, #1
 80009c2:	4619      	mov	r1, r3
 80009c4:	f002 fdc0 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 fa70 	bl	8002eb0 <HAL_Delay>
    for(int i = 0; i<4; i++)
 80009d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009d2:	3301      	adds	r3, #1
 80009d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80009d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009d8:	2b03      	cmp	r3, #3
 80009da:	dddf      	ble.n	800099c <turnOnAndOffAllByColumnSideways+0x174>
    }
    //turn off 4-7
    for(int i = 4; i<8; i++)
 80009dc:	2304      	movs	r3, #4
 80009de:	633b      	str	r3, [r7, #48]	@ 0x30
 80009e0:	e01c      	b.n	8000a1c <turnOnAndOffAllByColumnSideways+0x1f4>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 80009e2:	4948      	ldr	r1, [pc, #288]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 80009e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	440b      	add	r3, r1
 80009f0:	3304      	adds	r3, #4
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	4943      	ldr	r1, [pc, #268]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 80009f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	440b      	add	r3, r1
 8000a02:	3308      	adds	r3, #8
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	2201      	movs	r2, #1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f002 fd9d 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fa4d 	bl	8002eb0 <HAL_Delay>
    for(int i = 4; i<8; i++)
 8000a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a18:	3301      	adds	r3, #1
 8000a1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dddf      	ble.n	80009e2 <turnOnAndOffAllByColumnSideways+0x1ba>
    }
    //turn off 8-11
    for(int i = 8; i<12; i++)
 8000a22:	2308      	movs	r3, #8
 8000a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a26:	e01c      	b.n	8000a62 <turnOnAndOffAllByColumnSideways+0x23a>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000a28:	4936      	ldr	r1, [pc, #216]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000a2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	440b      	add	r3, r1
 8000a36:	3304      	adds	r3, #4
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	4932      	ldr	r1, [pc, #200]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a3e:	4613      	mov	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4413      	add	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	440b      	add	r3, r1
 8000a48:	3308      	adds	r3, #8
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f002 fd7a 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 fa2a 	bl	8002eb0 <HAL_Delay>
    for(int i = 8; i<12; i++)
 8000a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a5e:	3301      	adds	r3, #1
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a64:	2b0b      	cmp	r3, #11
 8000a66:	dddf      	ble.n	8000a28 <turnOnAndOffAllByColumnSideways+0x200>
    }
    //turn off 12-15
    for(int i = 12; i<16; i++)
 8000a68:	230c      	movs	r3, #12
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a6c:	e01c      	b.n	8000aa8 <turnOnAndOffAllByColumnSideways+0x280>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000a6e:	4925      	ldr	r1, [pc, #148]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000a70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a72:	4613      	mov	r3, r2
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	4413      	add	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	4920      	ldr	r1, [pc, #128]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000a82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a84:	4613      	mov	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	4413      	add	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	3308      	adds	r3, #8
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	2201      	movs	r2, #1
 8000a94:	4619      	mov	r1, r3
 8000a96:	f002 fd57 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fa07 	bl	8002eb0 <HAL_Delay>
    for(int i = 12; i<16; i++)
 8000aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	dddf      	ble.n	8000a6e <turnOnAndOffAllByColumnSideways+0x246>
    }
    //turn on 12-15
    for(int i = 12; i<16; i++)
 8000aae:	230c      	movs	r3, #12
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ab2:	e01c      	b.n	8000aee <turnOnAndOffAllByColumnSideways+0x2c6>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8000ab4:	4913      	ldr	r1, [pc, #76]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	490f      	ldr	r1, [pc, #60]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aca:	4613      	mov	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	3308      	adds	r3, #8
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	f002 fd34 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 f9e4 	bl	8002eb0 <HAL_Delay>
    for(int i = 12; i<16; i++)
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	3301      	adds	r3, #1
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	dddf      	ble.n	8000ab4 <turnOnAndOffAllByColumnSideways+0x28c>
    }
    //turn on 8-11
    for(int i = 8; i<12; i++)
 8000af4:	2308      	movs	r3, #8
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	e023      	b.n	8000b42 <turnOnAndOffAllByColumnSideways+0x31a>
 8000afa:	bf00      	nop
 8000afc:	200000c0 	.word	0x200000c0
 8000b00:	200000f4 	.word	0x200000f4
 8000b04:	20000000 	.word	0x20000000
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8000b08:	497e      	ldr	r1, [pc, #504]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000b0a:	6a3a      	ldr	r2, [r7, #32]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	440b      	add	r3, r1
 8000b16:	3304      	adds	r3, #4
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	497a      	ldr	r1, [pc, #488]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000b1c:	6a3a      	ldr	r2, [r7, #32]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	4413      	add	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	440b      	add	r3, r1
 8000b28:	3308      	adds	r3, #8
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f002 fd0a 	bl	8003548 <HAL_GPIO_WritePin>
    	    	HAL_Delay(x);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 f9ba 	bl	8002eb0 <HAL_Delay>
    for(int i = 8; i<12; i++)
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	623b      	str	r3, [r7, #32]
 8000b42:	6a3b      	ldr	r3, [r7, #32]
 8000b44:	2b0b      	cmp	r3, #11
 8000b46:	dddf      	ble.n	8000b08 <turnOnAndOffAllByColumnSideways+0x2e0>
    }
    //turn on 4-7
    for(int i = 4; i<8; i++)
 8000b48:	2304      	movs	r3, #4
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	e01c      	b.n	8000b88 <turnOnAndOffAllByColumnSideways+0x360>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8000b4e:	496d      	ldr	r1, [pc, #436]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000b50:	69fa      	ldr	r2, [r7, #28]
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	6818      	ldr	r0, [r3, #0]
 8000b60:	4968      	ldr	r1, [pc, #416]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	4613      	mov	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	3308      	adds	r3, #8
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	2200      	movs	r2, #0
 8000b74:	4619      	mov	r1, r3
 8000b76:	f002 fce7 	bl	8003548 <HAL_GPIO_WritePin>
    	    	HAL_Delay(x);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 f997 	bl	8002eb0 <HAL_Delay>
    for(int i = 4; i<8; i++)
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3301      	adds	r3, #1
 8000b86:	61fb      	str	r3, [r7, #28]
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	2b07      	cmp	r3, #7
 8000b8c:	dddf      	ble.n	8000b4e <turnOnAndOffAllByColumnSideways+0x326>
    }
    //turn on 0-3
    for(int i = 0; i<4; i++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	e01c      	b.n	8000bce <turnOnAndOffAllByColumnSideways+0x3a6>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8000b94:	495b      	ldr	r1, [pc, #364]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	4957      	ldr	r1, [pc, #348]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4613      	mov	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4413      	add	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3308      	adds	r3, #8
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f002 fcc4 	bl	8003548 <HAL_GPIO_WritePin>
    	    	HAL_Delay(x);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 f974 	bl	8002eb0 <HAL_Delay>
    for(int i = 0; i<4; i++)
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	dddf      	ble.n	8000b94 <turnOnAndOffAllByColumnSideways+0x36c>
    }
    //turn off 12-15
    for(int i = 12; i<16; i++)
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e01c      	b.n	8000c14 <turnOnAndOffAllByColumnSideways+0x3ec>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000bda:	494a      	ldr	r1, [pc, #296]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	3304      	adds	r3, #4
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	4945      	ldr	r1, [pc, #276]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	3308      	adds	r3, #8
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4619      	mov	r1, r3
 8000c02:	f002 fca1 	bl	8003548 <HAL_GPIO_WritePin>
    	    	HAL_Delay(x);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 f951 	bl	8002eb0 <HAL_Delay>
    for(int i = 12; i<16; i++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	2b0f      	cmp	r3, #15
 8000c18:	dddf      	ble.n	8000bda <turnOnAndOffAllByColumnSideways+0x3b2>
    }
    //turn off 8-11
    for(int i = 8; i<12; i++)
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	e01c      	b.n	8000c5a <turnOnAndOffAllByColumnSideways+0x432>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000c20:	4938      	ldr	r1, [pc, #224]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	3304      	adds	r3, #4
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	4934      	ldr	r1, [pc, #208]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4613      	mov	r3, r2
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	4413      	add	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	3308      	adds	r3, #8
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	2201      	movs	r2, #1
 8000c46:	4619      	mov	r1, r3
 8000c48:	f002 fc7e 	bl	8003548 <HAL_GPIO_WritePin>
    	    	    	HAL_Delay(x);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 f92e 	bl	8002eb0 <HAL_Delay>
    for(int i = 8; i<12; i++)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	3301      	adds	r3, #1
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	2b0b      	cmp	r3, #11
 8000c5e:	dddf      	ble.n	8000c20 <turnOnAndOffAllByColumnSideways+0x3f8>
    }
    //turn off 4-7
    for(int i = 4; i<8; i++)
 8000c60:	2304      	movs	r3, #4
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e01c      	b.n	8000ca0 <turnOnAndOffAllByColumnSideways+0x478>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000c66:	4927      	ldr	r1, [pc, #156]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	3304      	adds	r3, #4
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	4922      	ldr	r1, [pc, #136]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	440b      	add	r3, r1
 8000c86:	3308      	adds	r3, #8
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f002 fc5b 	bl	8003548 <HAL_GPIO_WritePin>
    	    	    	HAL_Delay(x);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 f90b 	bl	8002eb0 <HAL_Delay>
    for(int i = 4; i<8; i++)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b07      	cmp	r3, #7
 8000ca4:	dddf      	ble.n	8000c66 <turnOnAndOffAllByColumnSideways+0x43e>
    }
    //turn off 0-3
    for(int i = 0; i<4; i++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	e01c      	b.n	8000ce6 <turnOnAndOffAllByColumnSideways+0x4be>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000cac:	4915      	ldr	r1, [pc, #84]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	440b      	add	r3, r1
 8000cba:	3304      	adds	r3, #4
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	4911      	ldr	r1, [pc, #68]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3308      	adds	r3, #8
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f002 fc38 	bl	8003548 <HAL_GPIO_WritePin>
    	    	    	HAL_Delay(x);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 f8e8 	bl	8002eb0 <HAL_Delay>
    for(int i = 0; i<4; i++)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	dddf      	ble.n	8000cac <turnOnAndOffAllByColumnSideways+0x484>
  for(int y = 0; y<3; y++)
 8000cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cee:	3301      	adds	r3, #1
 8000cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	f77f adc2 	ble.w	800087e <turnOnAndOffAllByColumnSideways+0x56>
    }
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	3750      	adds	r7, #80	@ 0x50
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000000 	.word	0x20000000

08000d08 <layerstompUpAndDown>:

//up and down single layer stomp
void layerstompUpAndDown()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
  int x = 75;
 8000d0e:	234b      	movs	r3, #75	@ 0x4b
 8000d10:	603b      	str	r3, [r7, #0]
  for(int i = 0; i<4; i++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	e018      	b.n	8000d4a <layerstompUpAndDown+0x42>
  {
	  HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_RESET);
 8000d18:	4978      	ldr	r1, [pc, #480]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	440b      	add	r3, r1
 8000d26:	3304      	adds	r3, #4
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	4974      	ldr	r1, [pc, #464]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000d2c:	69fa      	ldr	r2, [r7, #28]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4413      	add	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	440b      	add	r3, r1
 8000d38:	3308      	adds	r3, #8
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f002 fc02 	bl	8003548 <HAL_GPIO_WritePin>
  for(int i = 0; i<4; i++)
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	3301      	adds	r3, #1
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	dde3      	ble.n	8000d18 <layerstompUpAndDown+0x10>
  }
  for(int y = 0; y<5; y++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	e0c9      	b.n	8000eea <layerstompUpAndDown+0x1e2>
  {
    for(int count = 0; count<1; count++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	e078      	b.n	8000e4e <layerstompUpAndDown+0x146>
    {
      for(int i = 0; i<4; i++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	e032      	b.n	8000dc8 <layerstompUpAndDown+0xc0>
      {
    	  HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_SET);
 8000d62:	4966      	ldr	r1, [pc, #408]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4613      	mov	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	440b      	add	r3, r1
 8000d70:	3304      	adds	r3, #4
 8000d72:	6818      	ldr	r0, [r3, #0]
 8000d74:	4961      	ldr	r1, [pc, #388]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	440b      	add	r3, r1
 8000d82:	3308      	adds	r3, #8
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	2201      	movs	r2, #1
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f002 fbdd 	bl	8003548 <HAL_GPIO_WritePin>
    	  HAL_Delay(x);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 f88d 	bl	8002eb0 <HAL_Delay>
          HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_RESET);
 8000d96:	4959      	ldr	r1, [pc, #356]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	440b      	add	r3, r1
 8000da4:	3304      	adds	r3, #4
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	4954      	ldr	r1, [pc, #336]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	440b      	add	r3, r1
 8000db6:	3308      	adds	r3, #8
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f002 fbc3 	bl	8003548 <HAL_GPIO_WritePin>
      for(int i = 0; i<4; i++)
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	ddc9      	ble.n	8000d62 <layerstompUpAndDown+0x5a>
      }
      for(int i = 4; i !=0; i--)
 8000dce:	2304      	movs	r3, #4
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	e036      	b.n	8000e42 <layerstompUpAndDown+0x13a>
      {
    	  HAL_GPIO_WritePin(layers[i-1].port, layers[i-1].pin, GPIO_PIN_SET);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	1e5a      	subs	r2, r3, #1
 8000dd8:	4948      	ldr	r1, [pc, #288]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	440b      	add	r3, r1
 8000de4:	3304      	adds	r3, #4
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	1e5a      	subs	r2, r3, #1
 8000dec:	4943      	ldr	r1, [pc, #268]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000dee:	4613      	mov	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	440b      	add	r3, r1
 8000df8:	3308      	adds	r3, #8
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f002 fba2 	bl	8003548 <HAL_GPIO_WritePin>
    	  HAL_Delay(x);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 f852 	bl	8002eb0 <HAL_Delay>
    	  HAL_GPIO_WritePin(layers[i-1].port, layers[i-1].pin, GPIO_PIN_RESET);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	493a      	ldr	r1, [pc, #232]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	1e5a      	subs	r2, r3, #1
 8000e24:	4935      	ldr	r1, [pc, #212]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	440b      	add	r3, r1
 8000e30:	3308      	adds	r3, #8
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	f002 fb86 	bl	8003548 <HAL_GPIO_WritePin>
      for(int i = 4; i !=0; i--)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1c5      	bne.n	8000dd4 <layerstompUpAndDown+0xcc>
    for(int count = 0; count<1; count++)
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	dd83      	ble.n	8000d5c <layerstompUpAndDown+0x54>
      }
    }
    for(int i = 0; i<4; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	e01c      	b.n	8000e94 <layerstompUpAndDown+0x18c>
    {
    	HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_SET);
 8000e5a:	4928      	ldr	r1, [pc, #160]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	3304      	adds	r3, #4
 8000e6a:	6818      	ldr	r0, [r3, #0]
 8000e6c:	4923      	ldr	r1, [pc, #140]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	3308      	adds	r3, #8
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4619      	mov	r1, r3
 8000e82:	f002 fb61 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 f811 	bl	8002eb0 <HAL_Delay>
    for(int i = 0; i<4; i++)
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	3301      	adds	r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	dddf      	ble.n	8000e5a <layerstompUpAndDown+0x152>
    }
    for(int i = 4; i!=0; i--)
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	e01e      	b.n	8000ede <layerstompUpAndDown+0x1d6>
    {
    	HAL_GPIO_WritePin(layers[i-1].port, layers[i-1].pin, GPIO_PIN_RESET);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	1e5a      	subs	r2, r3, #1
 8000ea4:	4915      	ldr	r1, [pc, #84]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	1e5a      	subs	r2, r3, #1
 8000eb8:	4910      	ldr	r1, [pc, #64]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3308      	adds	r3, #8
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f002 fb3c 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 ffec 	bl	8002eb0 <HAL_Delay>
    for(int i = 4; i!=0; i--)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1dd      	bne.n	8000ea0 <layerstompUpAndDown+0x198>
  for(int y = 0; y<5; y++)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	f77f af32 	ble.w	8000d56 <layerstompUpAndDown+0x4e>
    }
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3720      	adds	r7, #32
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000c0 	.word	0x200000c0

08000f00 <flickerOff>:

//flicker off
void flickerOff()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  enableAllPins();
 8000f06:	f7ff fb5f 	bl	80005c8 <enableAllPins>
  for(int i = 0; i!= 150; i+=5)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	e00f      	b.n	8000f30 <flickerOff+0x30>
  {
    disableAllPins();
 8000f10:	f7ff fb08 	bl	8000524 <disableAllPins>
    HAL_Delay(i+50);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3332      	adds	r3, #50	@ 0x32
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 ffc9 	bl	8002eb0 <HAL_Delay>
    enableAllPins();
 8000f1e:	f7ff fb53 	bl	80005c8 <enableAllPins>
    HAL_Delay(i);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 ffc3 	bl	8002eb0 <HAL_Delay>
  for(int i = 0; i!= 150; i+=5)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3305      	adds	r3, #5
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b96      	cmp	r3, #150	@ 0x96
 8000f34:	d1ec      	bne.n	8000f10 <flickerOff+0x10>
  }
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <aroundEdgeDown>:
//around edge of the cube down
void aroundEdgeDown()
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  for(int x = 200; x != 0; x -=50)
 8000f46:	23c8      	movs	r3, #200	@ 0xc8
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	e152      	b.n	80011f2 <aroundEdgeDown+0x2b2>
  {
    disableAllPins();
 8000f4c:	f7ff faea 	bl	8000524 <disableAllPins>
    for(int i = 4; i != 0; i--)
 8000f50:	2304      	movs	r3, #4
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	e146      	b.n	80011e4 <aroundEdgeDown+0x2a4>
    {
    	HAL_GPIO_WritePin(layers[i-1].port, layers[i-1].pin, GPIO_PIN_SET);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	1e5a      	subs	r2, r3, #1
 8000f5a:	49aa      	ldr	r1, [pc, #680]	@ (8001204 <aroundEdgeDown+0x2c4>)
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	3304      	adds	r3, #4
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	1e5a      	subs	r2, r3, #1
 8000f6e:	49a5      	ldr	r1, [pc, #660]	@ (8001204 <aroundEdgeDown+0x2c4>)
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4619      	mov	r1, r3
 8000f82:	f002 fae1 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_RESET);
 8000f86:	4ba0      	ldr	r3, [pc, #640]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	4a9f      	ldr	r2, [pc, #636]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000f8c:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8000f90:	2200      	movs	r2, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fad8 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_RESET);
 8000f98:	4b9b      	ldr	r3, [pc, #620]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9c:	4a9a      	ldr	r2, [pc, #616]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000f9e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 facf 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_RESET);
 8000faa:	4b97      	ldr	r3, [pc, #604]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fae:	4a96      	ldr	r2, [pc, #600]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fb0:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fac6 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_RESET);
 8000fbc:	4b92      	ldr	r3, [pc, #584]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000fc0:	4a91      	ldr	r2, [pc, #580]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fc2:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 fabd 	bl	8003548 <HAL_GPIO_WritePin>

    	HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_RESET);
 8000fce:	4b8e      	ldr	r3, [pc, #568]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4a8d      	ldr	r2, [pc, #564]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fd4:	8911      	ldrh	r1, [r2, #8]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 fab5 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 ff65 	bl	8002eb0 <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_SET);
 8000fe6:	4b88      	ldr	r3, [pc, #544]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	4a87      	ldr	r2, [pc, #540]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fec:	8911      	ldrh	r1, [r2, #8]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 faa9 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[4].port, pinMap[4].pin, GPIO_PIN_RESET);
 8000ff6:	4b84      	ldr	r3, [pc, #528]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ffa:	4a83      	ldr	r2, [pc, #524]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000ffc:	8f11      	ldrh	r1, [r2, #56]	@ 0x38
 8000ffe:	2200      	movs	r2, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f002 faa1 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f001 ff51 	bl	8002eb0 <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[4].port, pinMap[4].pin, GPIO_PIN_SET);
 800100e:	4b7e      	ldr	r3, [pc, #504]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001012:	4a7d      	ldr	r2, [pc, #500]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001014:	8f11      	ldrh	r1, [r2, #56]	@ 0x38
 8001016:	2201      	movs	r2, #1
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fa95 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[8].port, pinMap[8].pin, GPIO_PIN_RESET);
 800101e:	4b7a      	ldr	r3, [pc, #488]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001022:	4a79      	ldr	r2, [pc, #484]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001024:	f8b2 1068 	ldrh.w	r1, [r2, #104]	@ 0x68
 8001028:	2200      	movs	r2, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f002 fa8c 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f001 ff3c 	bl	8002eb0 <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[8].port, pinMap[8].pin, GPIO_PIN_SET);
 8001038:	4b73      	ldr	r3, [pc, #460]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800103a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800103c:	4a72      	ldr	r2, [pc, #456]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800103e:	f8b2 1068 	ldrh.w	r1, [r2, #104]	@ 0x68
 8001042:	2201      	movs	r2, #1
 8001044:	4618      	mov	r0, r3
 8001046:	f002 fa7f 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[12].port, pinMap[12].pin, GPIO_PIN_RESET);
 800104a:	4b6f      	ldr	r3, [pc, #444]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800104c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001050:	4a6d      	ldr	r2, [pc, #436]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001052:	f8b2 1098 	ldrh.w	r1, [r2, #152]	@ 0x98
 8001056:	2200      	movs	r2, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f002 fa75 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4618      	mov	r0, r3
 8001062:	f001 ff25 	bl	8002eb0 <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[12].port, pinMap[12].pin, GPIO_PIN_SET);
 8001066:	4b68      	ldr	r3, [pc, #416]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800106c:	4a66      	ldr	r2, [pc, #408]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800106e:	f8b2 1098 	ldrh.w	r1, [r2, #152]	@ 0x98
 8001072:	2201      	movs	r2, #1
 8001074:	4618      	mov	r0, r3
 8001076:	f002 fa67 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[13].port, pinMap[13].pin, GPIO_PIN_RESET);
 800107a:	4b63      	ldr	r3, [pc, #396]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800107c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001080:	4a61      	ldr	r2, [pc, #388]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001082:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 8001086:	2200      	movs	r2, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fa5d 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4618      	mov	r0, r3
 8001092:	f001 ff0d 	bl	8002eb0 <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[13].port, pinMap[13].pin, GPIO_PIN_SET);
 8001096:	4b5c      	ldr	r3, [pc, #368]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001098:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800109c:	4a5a      	ldr	r2, [pc, #360]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800109e:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 80010a2:	2201      	movs	r2, #1
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fa4f 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[14].port, pinMap[14].pin, GPIO_PIN_RESET);
 80010aa:	4b57      	ldr	r3, [pc, #348]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80010b0:	4a55      	ldr	r2, [pc, #340]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010b2:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	@ 0xb0
 80010b6:	2200      	movs	r2, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fa45 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 fef5 	bl	8002eb0 <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[14].port, pinMap[14].pin, GPIO_PIN_SET);
 80010c6:	4b50      	ldr	r3, [pc, #320]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80010cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010ce:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	@ 0xb0
 80010d2:	2201      	movs	r2, #1
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 fa37 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_RESET);
 80010da:	4b4b      	ldr	r3, [pc, #300]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80010e0:	4a49      	ldr	r2, [pc, #292]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010e2:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 80010e6:	2200      	movs	r2, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fa2d 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fedd 	bl	8002eb0 <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_SET);
 80010f6:	4b44      	ldr	r3, [pc, #272]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80010fc:	4a42      	ldr	r2, [pc, #264]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010fe:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 8001102:	2201      	movs	r2, #1
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fa1f 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[11].port, pinMap[11].pin, GPIO_PIN_RESET);
 800110a:	4b3f      	ldr	r3, [pc, #252]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800110c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001110:	4a3d      	ldr	r2, [pc, #244]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001112:	f8b2 108c 	ldrh.w	r1, [r2, #140]	@ 0x8c
 8001116:	2200      	movs	r2, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f002 fa15 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f001 fec5 	bl	8002eb0 <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[11].port, pinMap[11].pin, GPIO_PIN_SET);
 8001126:	4b38      	ldr	r3, [pc, #224]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800112c:	4a36      	ldr	r2, [pc, #216]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800112e:	f8b2 108c 	ldrh.w	r1, [r2, #140]	@ 0x8c
 8001132:	2201      	movs	r2, #1
 8001134:	4618      	mov	r0, r3
 8001136:	f002 fa07 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[7].port, pinMap[7].pin, GPIO_PIN_RESET);
 800113a:	4b33      	ldr	r3, [pc, #204]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113e:	4a32      	ldr	r2, [pc, #200]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001140:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8001144:	2200      	movs	r2, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f002 f9fe 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4618      	mov	r0, r3
 8001150:	f001 feae 	bl	8002eb0 <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[7].port, pinMap[7].pin, GPIO_PIN_SET);
 8001154:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001158:	4a2b      	ldr	r2, [pc, #172]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800115a:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800115e:	2201      	movs	r2, #1
 8001160:	4618      	mov	r0, r3
 8001162:	f002 f9f1 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[3].port, pinMap[3].pin, GPIO_PIN_RESET);
 8001166:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116a:	4a27      	ldr	r2, [pc, #156]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800116c:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 800116e:	2200      	movs	r2, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f002 f9e9 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	f001 fe99 	bl	8002eb0 <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[3].port, pinMap[3].pin, GPIO_PIN_SET);
 800117e:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001182:	4a21      	ldr	r2, [pc, #132]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001184:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001186:	2201      	movs	r2, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f002 f9dd 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[2].port, pinMap[2].pin, GPIO_PIN_RESET);
 800118e:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a1d      	ldr	r2, [pc, #116]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001194:	8c11      	ldrh	r1, [r2, #32]
 8001196:	2200      	movs	r2, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f002 f9d5 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f001 fe85 	bl	8002eb0 <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[2].port, pinMap[2].pin, GPIO_PIN_SET);
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a17      	ldr	r2, [pc, #92]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80011ac:	8c11      	ldrh	r1, [r2, #32]
 80011ae:	2201      	movs	r2, #1
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 f9c9 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[1].port, pinMap[1].pin, GPIO_PIN_RESET);
 80011b6:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	4a13      	ldr	r2, [pc, #76]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80011bc:	8a91      	ldrh	r1, [r2, #20]
 80011be:	2200      	movs	r2, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 f9c1 	bl	8003548 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fe71 	bl	8002eb0 <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[1].port, pinMap[1].pin, GPIO_PIN_SET);
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80011d4:	8a91      	ldrh	r1, [r2, #20]
 80011d6:	2201      	movs	r2, #1
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 f9b5 	bl	8003548 <HAL_GPIO_WritePin>
    for(int i = 4; i != 0; i--)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f47f aeb5 	bne.w	8000f56 <aroundEdgeDown+0x16>
  for(int x = 200; x != 0; x -=50)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b32      	subs	r3, #50	@ 0x32
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f47f aea9 	bne.w	8000f4c <aroundEdgeDown+0xc>
    }
  }
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200000c0 	.word	0x200000c0
 8001208:	20000000 	.word	0x20000000

0800120c <diagonalRectangle>:

//diagonal rectangle
void diagonalRectangle()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	@ 0x30
 8001210:	af00      	add	r7, sp, #0
  int x = 350;
 8001212:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8001216:	607b      	str	r3, [r7, #4]
  disableAllPins();
 8001218:	f7ff f984 	bl	8000524 <disableAllPins>
  for(int count = 0; count<5; count++)
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001220:	e1ae      	b.n	8001580 <diagonalRectangle+0x374>
  {
    //top left
    for(int i = 0; i<8; i++)
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001226:	e018      	b.n	800125a <diagonalRectangle+0x4e>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8001228:	499e      	ldr	r1, [pc, #632]	@ (80014a4 <diagonalRectangle+0x298>)
 800122a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	3304      	adds	r3, #4
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	499a      	ldr	r1, [pc, #616]	@ (80014a4 <diagonalRectangle+0x298>)
 800123c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3308      	adds	r3, #8
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	2200      	movs	r2, #0
 800124e:	4619      	mov	r1, r3
 8001250:	f002 f97a 	bl	8003548 <HAL_GPIO_WritePin>
    for(int i = 0; i<8; i++)
 8001254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001256:	3301      	adds	r3, #1
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800125a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125c:	2b07      	cmp	r3, #7
 800125e:	dde3      	ble.n	8001228 <diagonalRectangle+0x1c>

    }
    HAL_GPIO_WritePin(layers[3].port, layers[3].pin, GPIO_PIN_SET);
 8001260:	4b91      	ldr	r3, [pc, #580]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001264:	4a90      	ldr	r2, [pc, #576]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001266:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001268:	2201      	movs	r2, #1
 800126a:	4618      	mov	r0, r3
 800126c:	f002 f96c 	bl	8003548 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(layers[2].port, layers[2].pin, GPIO_PIN_SET);
 8001270:	4b8d      	ldr	r3, [pc, #564]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	4a8c      	ldr	r2, [pc, #560]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001276:	8c11      	ldrh	r1, [r2, #32]
 8001278:	2201      	movs	r2, #1
 800127a:	4618      	mov	r0, r3
 800127c:	f002 f964 	bl	8003548 <HAL_GPIO_WritePin>
    HAL_Delay(x);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fe14 	bl	8002eb0 <HAL_Delay>

    disableAllPins();
 8001288:	f7ff f94c 	bl	8000524 <disableAllPins>
    //middle middle
    for(int i = 4; i<12; i++)
 800128c:	2304      	movs	r3, #4
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001290:	e018      	b.n	80012c4 <diagonalRectangle+0xb8>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8001292:	4984      	ldr	r1, [pc, #528]	@ (80014a4 <diagonalRectangle+0x298>)
 8001294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	3304      	adds	r3, #4
 80012a2:	6818      	ldr	r0, [r3, #0]
 80012a4:	497f      	ldr	r1, [pc, #508]	@ (80014a4 <diagonalRectangle+0x298>)
 80012a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	3308      	adds	r3, #8
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	f002 f945 	bl	8003548 <HAL_GPIO_WritePin>
    for(int i = 4; i<12; i++)
 80012be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c0:	3301      	adds	r3, #1
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80012c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c6:	2b0b      	cmp	r3, #11
 80012c8:	dde3      	ble.n	8001292 <diagonalRectangle+0x86>
    }
    HAL_GPIO_WritePin(layers[1].port, layers[1].pin, GPIO_PIN_SET);
 80012ca:	4b77      	ldr	r3, [pc, #476]	@ (80014a8 <diagonalRectangle+0x29c>)
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	4a76      	ldr	r2, [pc, #472]	@ (80014a8 <diagonalRectangle+0x29c>)
 80012d0:	8a91      	ldrh	r1, [r2, #20]
 80012d2:	2201      	movs	r2, #1
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 f937 	bl	8003548 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(layers[2].port, layers[2].pin, GPIO_PIN_SET);
 80012da:	4b73      	ldr	r3, [pc, #460]	@ (80014a8 <diagonalRectangle+0x29c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	4a72      	ldr	r2, [pc, #456]	@ (80014a8 <diagonalRectangle+0x29c>)
 80012e0:	8c11      	ldrh	r1, [r2, #32]
 80012e2:	2201      	movs	r2, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 f92f 	bl	8003548 <HAL_GPIO_WritePin>

    HAL_Delay(x);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 fddf 	bl	8002eb0 <HAL_Delay>

    disableAllPins();
 80012f2:	f7ff f917 	bl	8000524 <disableAllPins>
    //bottom right
    for(int i = 8; i<16; i++)
 80012f6:	2308      	movs	r3, #8
 80012f8:	623b      	str	r3, [r7, #32]
 80012fa:	e018      	b.n	800132e <diagonalRectangle+0x122>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 80012fc:	4969      	ldr	r1, [pc, #420]	@ (80014a4 <diagonalRectangle+0x298>)
 80012fe:	6a3a      	ldr	r2, [r7, #32]
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	3304      	adds	r3, #4
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	4965      	ldr	r1, [pc, #404]	@ (80014a4 <diagonalRectangle+0x298>)
 8001310:	6a3a      	ldr	r2, [r7, #32]
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	3308      	adds	r3, #8
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	2200      	movs	r2, #0
 8001322:	4619      	mov	r1, r3
 8001324:	f002 f910 	bl	8003548 <HAL_GPIO_WritePin>
    for(int i = 8; i<16; i++)
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	3301      	adds	r3, #1
 800132c:	623b      	str	r3, [r7, #32]
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	dde3      	ble.n	80012fc <diagonalRectangle+0xf0>
    }
    HAL_GPIO_WritePin(layers[0].port, layers[0].pin, GPIO_PIN_SET);
 8001334:	4b5c      	ldr	r3, [pc, #368]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a5b      	ldr	r2, [pc, #364]	@ (80014a8 <diagonalRectangle+0x29c>)
 800133a:	8911      	ldrh	r1, [r2, #8]
 800133c:	2201      	movs	r2, #1
 800133e:	4618      	mov	r0, r3
 8001340:	f002 f902 	bl	8003548 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(layers[1].port, layers[1].pin, GPIO_PIN_SET);
 8001344:	4b58      	ldr	r3, [pc, #352]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	4a57      	ldr	r2, [pc, #348]	@ (80014a8 <diagonalRectangle+0x29c>)
 800134a:	8a91      	ldrh	r1, [r2, #20]
 800134c:	2201      	movs	r2, #1
 800134e:	4618      	mov	r0, r3
 8001350:	f002 f8fa 	bl	8003548 <HAL_GPIO_WritePin>
    HAL_Delay(x);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fdaa 	bl	8002eb0 <HAL_Delay>

    disableAllPins();
 800135c:	f7ff f8e2 	bl	8000524 <disableAllPins>
    //bottom middle
    for(int i = 4; i<12; i++)
 8001360:	2304      	movs	r3, #4
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	e018      	b.n	8001398 <diagonalRectangle+0x18c>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8001366:	494f      	ldr	r1, [pc, #316]	@ (80014a4 <diagonalRectangle+0x298>)
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	3304      	adds	r3, #4
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	494a      	ldr	r1, [pc, #296]	@ (80014a4 <diagonalRectangle+0x298>)
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	3308      	adds	r3, #8
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	f002 f8db 	bl	8003548 <HAL_GPIO_WritePin>
    for(int i = 4; i<12; i++)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b0b      	cmp	r3, #11
 800139c:	dde3      	ble.n	8001366 <diagonalRectangle+0x15a>
    }
    HAL_GPIO_WritePin(layers[0].port, layers[0].pin, GPIO_PIN_SET);
 800139e:	4b42      	ldr	r3, [pc, #264]	@ (80014a8 <diagonalRectangle+0x29c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4a41      	ldr	r2, [pc, #260]	@ (80014a8 <diagonalRectangle+0x29c>)
 80013a4:	8911      	ldrh	r1, [r2, #8]
 80013a6:	2201      	movs	r2, #1
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 f8cd 	bl	8003548 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(layers[1].port, layers[1].pin, GPIO_PIN_SET);
 80013ae:	4b3e      	ldr	r3, [pc, #248]	@ (80014a8 <diagonalRectangle+0x29c>)
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	4a3d      	ldr	r2, [pc, #244]	@ (80014a8 <diagonalRectangle+0x29c>)
 80013b4:	8a91      	ldrh	r1, [r2, #20]
 80013b6:	2201      	movs	r2, #1
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 f8c5 	bl	8003548 <HAL_GPIO_WritePin>
       HAL_Delay(x);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 fd75 	bl	8002eb0 <HAL_Delay>
       disableAllPins();
 80013c6:	f7ff f8ad 	bl	8000524 <disableAllPins>
    //bottom left
    for(int i = 0; i<8; i++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	e018      	b.n	8001402 <diagonalRectangle+0x1f6>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 80013d0:	4934      	ldr	r1, [pc, #208]	@ (80014a4 <diagonalRectangle+0x298>)
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	3304      	adds	r3, #4
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	4930      	ldr	r1, [pc, #192]	@ (80014a4 <diagonalRectangle+0x298>)
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	3308      	adds	r3, #8
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	f002 f8a6 	bl	8003548 <HAL_GPIO_WritePin>
    for(int i = 0; i<8; i++)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	3301      	adds	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b07      	cmp	r3, #7
 8001406:	dde3      	ble.n	80013d0 <diagonalRectangle+0x1c4>
    }
    HAL_GPIO_WritePin(layers[0].port, layers[0].pin, GPIO_PIN_SET);
 8001408:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <diagonalRectangle+0x29c>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	4a26      	ldr	r2, [pc, #152]	@ (80014a8 <diagonalRectangle+0x29c>)
 800140e:	8911      	ldrh	r1, [r2, #8]
 8001410:	2201      	movs	r2, #1
 8001412:	4618      	mov	r0, r3
 8001414:	f002 f898 	bl	8003548 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(layers[1].port, layers[1].pin, GPIO_PIN_SET);
 8001418:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <diagonalRectangle+0x29c>)
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	4a22      	ldr	r2, [pc, #136]	@ (80014a8 <diagonalRectangle+0x29c>)
 800141e:	8a91      	ldrh	r1, [r2, #20]
 8001420:	2201      	movs	r2, #1
 8001422:	4618      	mov	r0, r3
 8001424:	f002 f890 	bl	8003548 <HAL_GPIO_WritePin>
    HAL_Delay(x);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fd40 	bl	8002eb0 <HAL_Delay>
    disableAllPins();
 8001430:	f7ff f878 	bl	8000524 <disableAllPins>
    //middle middle
    for(int i = 4; i<12; i++)
 8001434:	2304      	movs	r3, #4
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e018      	b.n	800146c <diagonalRectangle+0x260>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 800143a:	491a      	ldr	r1, [pc, #104]	@ (80014a4 <diagonalRectangle+0x298>)
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	3304      	adds	r3, #4
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	4915      	ldr	r1, [pc, #84]	@ (80014a4 <diagonalRectangle+0x298>)
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	3308      	adds	r3, #8
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	2200      	movs	r2, #0
 8001460:	4619      	mov	r1, r3
 8001462:	f002 f871 	bl	8003548 <HAL_GPIO_WritePin>
    for(int i = 4; i<12; i++)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	2b0b      	cmp	r3, #11
 8001470:	dde3      	ble.n	800143a <diagonalRectangle+0x22e>
    }
    HAL_GPIO_WritePin(layers[1].port, layers[1].pin, GPIO_PIN_SET);
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	4a0c      	ldr	r2, [pc, #48]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001478:	8a91      	ldrh	r1, [r2, #20]
 800147a:	2201      	movs	r2, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f002 f863 	bl	8003548 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(layers[2].port, layers[2].pin, GPIO_PIN_SET);
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001488:	8c11      	ldrh	r1, [r2, #32]
 800148a:	2201      	movs	r2, #1
 800148c:	4618      	mov	r0, r3
 800148e:	f002 f85b 	bl	8003548 <HAL_GPIO_WritePin>
    HAL_Delay(x);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	f001 fd0b 	bl	8002eb0 <HAL_Delay>
    disableAllPins();
 800149a:	f7ff f843 	bl	8000524 <disableAllPins>
    //top right
    for(int i = 8; i<16; i++)
 800149e:	2308      	movs	r3, #8
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	e01c      	b.n	80014de <diagonalRectangle+0x2d2>
 80014a4:	20000000 	.word	0x20000000
 80014a8:	200000c0 	.word	0x200000c0
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 80014ac:	4953      	ldr	r1, [pc, #332]	@ (80015fc <diagonalRectangle+0x3f0>)
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	3304      	adds	r3, #4
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	494f      	ldr	r1, [pc, #316]	@ (80015fc <diagonalRectangle+0x3f0>)
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	3308      	adds	r3, #8
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	f002 f838 	bl	8003548 <HAL_GPIO_WritePin>
    for(int i = 8; i<16; i++)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	3301      	adds	r3, #1
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	2b0f      	cmp	r3, #15
 80014e2:	dde3      	ble.n	80014ac <diagonalRectangle+0x2a0>
    }
    HAL_GPIO_WritePin(layers[2].port, layers[2].pin, GPIO_PIN_SET);
 80014e4:	4b46      	ldr	r3, [pc, #280]	@ (8001600 <diagonalRectangle+0x3f4>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	4a45      	ldr	r2, [pc, #276]	@ (8001600 <diagonalRectangle+0x3f4>)
 80014ea:	8c11      	ldrh	r1, [r2, #32]
 80014ec:	2201      	movs	r2, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 f82a 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(layers[3].port, layers[3].pin, GPIO_PIN_SET);
 80014f4:	4b42      	ldr	r3, [pc, #264]	@ (8001600 <diagonalRectangle+0x3f4>)
 80014f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f8:	4a41      	ldr	r2, [pc, #260]	@ (8001600 <diagonalRectangle+0x3f4>)
 80014fa:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 80014fc:	2201      	movs	r2, #1
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 f822 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_Delay(x);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4618      	mov	r0, r3
 8001508:	f001 fcd2 	bl	8002eb0 <HAL_Delay>
        disableAllPins();
 800150c:	f7ff f80a 	bl	8000524 <disableAllPins>
    //top middle
    for(int i = 4; i<12; i++)
 8001510:	2304      	movs	r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	e018      	b.n	8001548 <diagonalRectangle+0x33c>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8001516:	4939      	ldr	r1, [pc, #228]	@ (80015fc <diagonalRectangle+0x3f0>)
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	3304      	adds	r3, #4
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	4934      	ldr	r1, [pc, #208]	@ (80015fc <diagonalRectangle+0x3f0>)
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	3308      	adds	r3, #8
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	4619      	mov	r1, r3
 800153e:	f002 f803 	bl	8003548 <HAL_GPIO_WritePin>
    for(int i = 4; i<12; i++)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3301      	adds	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b0b      	cmp	r3, #11
 800154c:	dde3      	ble.n	8001516 <diagonalRectangle+0x30a>
    }
    HAL_GPIO_WritePin(layers[2].port, layers[2].pin, GPIO_PIN_SET);
 800154e:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <diagonalRectangle+0x3f4>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a2b      	ldr	r2, [pc, #172]	@ (8001600 <diagonalRectangle+0x3f4>)
 8001554:	8c11      	ldrh	r1, [r2, #32]
 8001556:	2201      	movs	r2, #1
 8001558:	4618      	mov	r0, r3
 800155a:	f001 fff5 	bl	8003548 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(layers[3].port, layers[3].pin, GPIO_PIN_SET);
 800155e:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <diagonalRectangle+0x3f4>)
 8001560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001562:	4a27      	ldr	r2, [pc, #156]	@ (8001600 <diagonalRectangle+0x3f4>)
 8001564:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001566:	2201      	movs	r2, #1
 8001568:	4618      	mov	r0, r3
 800156a:	f001 ffed 	bl	8003548 <HAL_GPIO_WritePin>
           HAL_Delay(x);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4618      	mov	r0, r3
 8001572:	f001 fc9d 	bl	8002eb0 <HAL_Delay>
           disableAllPins();
 8001576:	f7fe ffd5 	bl	8000524 <disableAllPins>
  for(int count = 0; count<5; count++)
 800157a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157c:	3301      	adds	r3, #1
 800157e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001582:	2b04      	cmp	r3, #4
 8001584:	f77f ae4d 	ble.w	8001222 <diagonalRectangle+0x16>
  }
  //top left
  for(int i = 0; i<8; i++)
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	e018      	b.n	80015c0 <diagonalRectangle+0x3b4>
  {
	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 800158e:	491b      	ldr	r1, [pc, #108]	@ (80015fc <diagonalRectangle+0x3f0>)
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	3304      	adds	r3, #4
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	4916      	ldr	r1, [pc, #88]	@ (80015fc <diagonalRectangle+0x3f0>)
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	3308      	adds	r3, #8
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	f001 ffc7 	bl	8003548 <HAL_GPIO_WritePin>
  for(int i = 0; i<8; i++)
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3301      	adds	r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b07      	cmp	r3, #7
 80015c4:	dde3      	ble.n	800158e <diagonalRectangle+0x382>
  }
  HAL_GPIO_WritePin(layers[3].port, layers[3].pin, GPIO_PIN_SET);
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <diagonalRectangle+0x3f4>)
 80015c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001600 <diagonalRectangle+0x3f4>)
 80015cc:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 80015ce:	2201      	movs	r2, #1
 80015d0:	4618      	mov	r0, r3
 80015d2:	f001 ffb9 	bl	8003548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(layers[2].port, layers[2].pin, GPIO_PIN_SET);
 80015d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <diagonalRectangle+0x3f4>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a09      	ldr	r2, [pc, #36]	@ (8001600 <diagonalRectangle+0x3f4>)
 80015dc:	8c11      	ldrh	r1, [r2, #32]
 80015de:	2201      	movs	r2, #1
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 ffb1 	bl	8003548 <HAL_GPIO_WritePin>
  HAL_Delay(x);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f001 fc61 	bl	8002eb0 <HAL_Delay>
  disableAllPins();
 80015ee:	f7fe ff99 	bl	8000524 <disableAllPins>
}
 80015f2:	bf00      	nop
 80015f4:	3730      	adds	r7, #48	@ 0x30
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000000 	.word	0x20000000
 8001600:	200000c0 	.word	0x200000c0

08001604 <propeller>:

//propeller
void propeller()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
  disableAllPins();
 800160a:	f7fe ff8b 	bl	8000524 <disableAllPins>
  int x = 90;
 800160e:	235a      	movs	r3, #90	@ 0x5a
 8001610:	607b      	str	r3, [r7, #4]
  for(int y = 4; y>0; y--)
 8001612:	2304      	movs	r3, #4
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	e120      	b.n	800185a <propeller+0x256>
  {
    for(int i = 0; i<6; i++)
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	e116      	b.n	800184c <propeller+0x248>
    {
      //turn on layer
    	HAL_GPIO_WritePin(layers[y-1].port, layers[y-1].pin, GPIO_PIN_SET);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	49a7      	ldr	r1, [pc, #668]	@ (80018c0 <propeller+0x2bc>)
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	3304      	adds	r3, #4
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1e5a      	subs	r2, r3, #1
 8001636:	49a2      	ldr	r1, [pc, #648]	@ (80018c0 <propeller+0x2bc>)
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3308      	adds	r3, #8
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	4619      	mov	r1, r3
 800164a:	f001 ff7d 	bl	8003548 <HAL_GPIO_WritePin>
      //a1
      turnColumnsOff();
 800164e:	f7ff f80d 	bl	800066c <turnColumnsOff>
      HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_RESET);
 8001652:	4b9c      	ldr	r3, [pc, #624]	@ (80018c4 <propeller+0x2c0>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a9b      	ldr	r2, [pc, #620]	@ (80018c4 <propeller+0x2c0>)
 8001658:	8911      	ldrh	r1, [r2, #8]
 800165a:	2200      	movs	r2, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f001 ff73 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_RESET);
 8001662:	4b98      	ldr	r3, [pc, #608]	@ (80018c4 <propeller+0x2c0>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	4a97      	ldr	r2, [pc, #604]	@ (80018c4 <propeller+0x2c0>)
 8001668:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 800166c:	2200      	movs	r2, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f001 ff6a 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_RESET);
 8001674:	4b93      	ldr	r3, [pc, #588]	@ (80018c4 <propeller+0x2c0>)
 8001676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001678:	4a92      	ldr	r2, [pc, #584]	@ (80018c4 <propeller+0x2c0>)
 800167a:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 800167e:	2200      	movs	r2, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f001 ff61 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_RESET);
 8001686:	4b8f      	ldr	r3, [pc, #572]	@ (80018c4 <propeller+0x2c0>)
 8001688:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800168c:	4a8d      	ldr	r2, [pc, #564]	@ (80018c4 <propeller+0x2c0>)
 800168e:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 8001692:	2200      	movs	r2, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f001 ff57 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_Delay(x);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	f001 fc07 	bl	8002eb0 <HAL_Delay>
      //b1
      turnColumnsOff();
 80016a2:	f7fe ffe3 	bl	800066c <turnColumnsOff>
      HAL_GPIO_WritePin(pinMap[4].port, pinMap[4].pin, GPIO_PIN_RESET);
 80016a6:	4b87      	ldr	r3, [pc, #540]	@ (80018c4 <propeller+0x2c0>)
 80016a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016aa:	4a86      	ldr	r2, [pc, #536]	@ (80018c4 <propeller+0x2c0>)
 80016ac:	8f11      	ldrh	r1, [r2, #56]	@ 0x38
 80016ae:	2200      	movs	r2, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 ff49 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_RESET);
 80016b6:	4b83      	ldr	r3, [pc, #524]	@ (80018c4 <propeller+0x2c0>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	4a82      	ldr	r2, [pc, #520]	@ (80018c4 <propeller+0x2c0>)
 80016bc:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 80016c0:	2200      	movs	r2, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f001 ff40 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_RESET);
 80016c8:	4b7e      	ldr	r3, [pc, #504]	@ (80018c4 <propeller+0x2c0>)
 80016ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80016cc:	4a7d      	ldr	r2, [pc, #500]	@ (80018c4 <propeller+0x2c0>)
 80016ce:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 80016d2:	2200      	movs	r2, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 ff37 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[11].port, pinMap[11].pin, GPIO_PIN_RESET);
 80016da:	4b7a      	ldr	r3, [pc, #488]	@ (80018c4 <propeller+0x2c0>)
 80016dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e0:	4a78      	ldr	r2, [pc, #480]	@ (80018c4 <propeller+0x2c0>)
 80016e2:	f8b2 108c 	ldrh.w	r1, [r2, #140]	@ 0x8c
 80016e6:	2200      	movs	r2, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 ff2d 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_Delay(x);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 fbdd 	bl	8002eb0 <HAL_Delay>
      //c1
      turnColumnsOff();
 80016f6:	f7fe ffb9 	bl	800066c <turnColumnsOff>
      HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_RESET);
 80016fa:	4b72      	ldr	r3, [pc, #456]	@ (80018c4 <propeller+0x2c0>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	4a71      	ldr	r2, [pc, #452]	@ (80018c4 <propeller+0x2c0>)
 8001700:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001704:	2200      	movs	r2, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f001 ff1e 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[7].port, pinMap[7].pin, GPIO_PIN_RESET);
 800170c:	4b6d      	ldr	r3, [pc, #436]	@ (80018c4 <propeller+0x2c0>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001710:	4a6c      	ldr	r2, [pc, #432]	@ (80018c4 <propeller+0x2c0>)
 8001712:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8001716:	2200      	movs	r2, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f001 ff15 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[8].port, pinMap[8].pin, GPIO_PIN_RESET);
 800171e:	4b69      	ldr	r3, [pc, #420]	@ (80018c4 <propeller+0x2c0>)
 8001720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001722:	4a68      	ldr	r2, [pc, #416]	@ (80018c4 <propeller+0x2c0>)
 8001724:	f8b2 1068 	ldrh.w	r1, [r2, #104]	@ 0x68
 8001728:	2200      	movs	r2, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f001 ff0c 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_RESET);
 8001730:	4b64      	ldr	r3, [pc, #400]	@ (80018c4 <propeller+0x2c0>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001734:	4a63      	ldr	r2, [pc, #396]	@ (80018c4 <propeller+0x2c0>)
 8001736:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 800173a:	2200      	movs	r2, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f001 ff03 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_Delay(x);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4618      	mov	r0, r3
 8001746:	f001 fbb3 	bl	8002eb0 <HAL_Delay>
      //d1
      turnColumnsOff();
 800174a:	f7fe ff8f 	bl	800066c <turnColumnsOff>
      HAL_GPIO_WritePin(pinMap[3].port, pinMap[3].pin, GPIO_PIN_RESET);
 800174e:	4b5d      	ldr	r3, [pc, #372]	@ (80018c4 <propeller+0x2c0>)
 8001750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001752:	4a5c      	ldr	r2, [pc, #368]	@ (80018c4 <propeller+0x2c0>)
 8001754:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001756:	2200      	movs	r2, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f001 fef5 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_RESET);
 800175e:	4b59      	ldr	r3, [pc, #356]	@ (80018c4 <propeller+0x2c0>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	4a58      	ldr	r2, [pc, #352]	@ (80018c4 <propeller+0x2c0>)
 8001764:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001768:	2200      	movs	r2, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f001 feec 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_RESET);
 8001770:	4b54      	ldr	r3, [pc, #336]	@ (80018c4 <propeller+0x2c0>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001774:	4a53      	ldr	r2, [pc, #332]	@ (80018c4 <propeller+0x2c0>)
 8001776:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 800177a:	2200      	movs	r2, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f001 fee3 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[12].port, pinMap[12].pin, GPIO_PIN_RESET);
 8001782:	4b50      	ldr	r3, [pc, #320]	@ (80018c4 <propeller+0x2c0>)
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001788:	4a4e      	ldr	r2, [pc, #312]	@ (80018c4 <propeller+0x2c0>)
 800178a:	f8b2 1098 	ldrh.w	r1, [r2, #152]	@ 0x98
 800178e:	2200      	movs	r2, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f001 fed9 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_Delay(x);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	f001 fb89 	bl	8002eb0 <HAL_Delay>
      //d2
      turnColumnsOff();
 800179e:	f7fe ff65 	bl	800066c <turnColumnsOff>
      HAL_GPIO_WritePin(pinMap[2].port, pinMap[2].pin, GPIO_PIN_RESET);
 80017a2:	4b48      	ldr	r3, [pc, #288]	@ (80018c4 <propeller+0x2c0>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a47      	ldr	r2, [pc, #284]	@ (80018c4 <propeller+0x2c0>)
 80017a8:	8c11      	ldrh	r1, [r2, #32]
 80017aa:	2200      	movs	r2, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 fecb 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_RESET);
 80017b2:	4b44      	ldr	r3, [pc, #272]	@ (80018c4 <propeller+0x2c0>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b6:	4a43      	ldr	r2, [pc, #268]	@ (80018c4 <propeller+0x2c0>)
 80017b8:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 80017bc:	2200      	movs	r2, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 fec2 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_RESET);
 80017c4:	4b3f      	ldr	r3, [pc, #252]	@ (80018c4 <propeller+0x2c0>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c8:	4a3e      	ldr	r2, [pc, #248]	@ (80018c4 <propeller+0x2c0>)
 80017ca:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 80017ce:	2200      	movs	r2, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f001 feb9 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[13].port, pinMap[13].pin, GPIO_PIN_RESET);
 80017d6:	4b3b      	ldr	r3, [pc, #236]	@ (80018c4 <propeller+0x2c0>)
 80017d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80017dc:	4a39      	ldr	r2, [pc, #228]	@ (80018c4 <propeller+0x2c0>)
 80017de:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 80017e2:	2200      	movs	r2, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 feaf 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_Delay(x);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f001 fb5f 	bl	8002eb0 <HAL_Delay>
      //d3
      turnColumnsOff();
 80017f2:	f7fe ff3b 	bl	800066c <turnColumnsOff>
      HAL_GPIO_WritePin(pinMap[1].port, pinMap[1].pin, GPIO_PIN_RESET);
 80017f6:	4b33      	ldr	r3, [pc, #204]	@ (80018c4 <propeller+0x2c0>)
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	4a32      	ldr	r2, [pc, #200]	@ (80018c4 <propeller+0x2c0>)
 80017fc:	8a91      	ldrh	r1, [r2, #20]
 80017fe:	2200      	movs	r2, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f001 fea1 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_RESET);
 8001806:	4b2f      	ldr	r3, [pc, #188]	@ (80018c4 <propeller+0x2c0>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	4a2e      	ldr	r2, [pc, #184]	@ (80018c4 <propeller+0x2c0>)
 800180c:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8001810:	2200      	movs	r2, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f001 fe98 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_RESET);
 8001818:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <propeller+0x2c0>)
 800181a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800181c:	4a29      	ldr	r2, [pc, #164]	@ (80018c4 <propeller+0x2c0>)
 800181e:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8001822:	2200      	movs	r2, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f001 fe8f 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[14].port, pinMap[14].pin, GPIO_PIN_RESET);
 800182a:	4b26      	ldr	r3, [pc, #152]	@ (80018c4 <propeller+0x2c0>)
 800182c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001830:	4a24      	ldr	r2, [pc, #144]	@ (80018c4 <propeller+0x2c0>)
 8001832:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	@ 0xb0
 8001836:	2200      	movs	r2, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f001 fe85 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_Delay(x);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f001 fb35 	bl	8002eb0 <HAL_Delay>
    for(int i = 0; i<6; i++)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	3301      	adds	r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b05      	cmp	r3, #5
 8001850:	f77f aee5 	ble.w	800161e <propeller+0x1a>
  for(int y = 4; y>0; y--)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3b01      	subs	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	f73f aedb 	bgt.w	8001618 <propeller+0x14>
    }
  }
  //d4
  turnColumnsOff();
 8001862:	f7fe ff03 	bl	800066c <turnColumnsOff>
  HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_RESET);
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <propeller+0x2c0>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a16      	ldr	r2, [pc, #88]	@ (80018c4 <propeller+0x2c0>)
 800186c:	8911      	ldrh	r1, [r2, #8]
 800186e:	2200      	movs	r2, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f001 fe69 	bl	8003548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_RESET);
 8001876:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <propeller+0x2c0>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <propeller+0x2c0>)
 800187c:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8001880:	2200      	movs	r2, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f001 fe60 	bl	8003548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_RESET);
 8001888:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <propeller+0x2c0>)
 800188a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800188c:	4a0d      	ldr	r2, [pc, #52]	@ (80018c4 <propeller+0x2c0>)
 800188e:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8001892:	2200      	movs	r2, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f001 fe57 	bl	8003548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_RESET);
 800189a:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <propeller+0x2c0>)
 800189c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80018a0:	4a08      	ldr	r2, [pc, #32]	@ (80018c4 <propeller+0x2c0>)
 80018a2:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 80018a6:	2200      	movs	r2, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f001 fe4d 	bl	8003548 <HAL_GPIO_WritePin>
  HAL_Delay(x);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f001 fafd 	bl	8002eb0 <HAL_Delay>
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200000c0 	.word	0x200000c0
 80018c4:	20000000 	.word	0x20000000

080018c8 <spiralInAndOut>:

//spiral in and out
void spiralInAndOut()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
  enableAllPins();
 80018ce:	f7fe fe7b 	bl	80005c8 <enableAllPins>
  int x = 60;
 80018d2:	233c      	movs	r3, #60	@ 0x3c
 80018d4:	603b      	str	r3, [r7, #0]
  for(int i = 0; i<6; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	e349      	b.n	8001f70 <spiralInAndOut+0x6a8>
  {
    //spiral in clockwise
	  HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_SET);
 80018dc:	4bc3      	ldr	r3, [pc, #780]	@ (8001bec <spiralInAndOut+0x324>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4ac2      	ldr	r2, [pc, #776]	@ (8001bec <spiralInAndOut+0x324>)
 80018e2:	8911      	ldrh	r1, [r2, #8]
 80018e4:	2201      	movs	r2, #1
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 fe2e 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 fade 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[1].port, pinMap[1].pin, GPIO_PIN_SET);
 80018f4:	4bbd      	ldr	r3, [pc, #756]	@ (8001bec <spiralInAndOut+0x324>)
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	4abc      	ldr	r2, [pc, #752]	@ (8001bec <spiralInAndOut+0x324>)
 80018fa:	8a91      	ldrh	r1, [r2, #20]
 80018fc:	2201      	movs	r2, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 fe22 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f001 fad2 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[2].port, pinMap[2].pin, GPIO_PIN_SET);
 800190c:	4bb7      	ldr	r3, [pc, #732]	@ (8001bec <spiralInAndOut+0x324>)
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	4ab6      	ldr	r2, [pc, #728]	@ (8001bec <spiralInAndOut+0x324>)
 8001912:	8c11      	ldrh	r1, [r2, #32]
 8001914:	2201      	movs	r2, #1
 8001916:	4618      	mov	r0, r3
 8001918:	f001 fe16 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f001 fac6 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[3].port, pinMap[3].pin, GPIO_PIN_SET);
 8001924:	4bb1      	ldr	r3, [pc, #708]	@ (8001bec <spiralInAndOut+0x324>)
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	4ab0      	ldr	r2, [pc, #704]	@ (8001bec <spiralInAndOut+0x324>)
 800192a:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 800192c:	2201      	movs	r2, #1
 800192e:	4618      	mov	r0, r3
 8001930:	f001 fe0a 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f001 faba 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[7].port, pinMap[7].pin, GPIO_PIN_SET);
 800193c:	4bab      	ldr	r3, [pc, #684]	@ (8001bec <spiralInAndOut+0x324>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001940:	4aaa      	ldr	r2, [pc, #680]	@ (8001bec <spiralInAndOut+0x324>)
 8001942:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8001946:	2201      	movs	r2, #1
 8001948:	4618      	mov	r0, r3
 800194a:	f001 fdfd 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f001 faad 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[11].port, pinMap[11].pin, GPIO_PIN_SET);
 8001956:	4ba5      	ldr	r3, [pc, #660]	@ (8001bec <spiralInAndOut+0x324>)
 8001958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800195c:	4aa3      	ldr	r2, [pc, #652]	@ (8001bec <spiralInAndOut+0x324>)
 800195e:	f8b2 108c 	ldrh.w	r1, [r2, #140]	@ 0x8c
 8001962:	2201      	movs	r2, #1
 8001964:	4618      	mov	r0, r3
 8001966:	f001 fdef 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f001 fa9f 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_SET);
 8001972:	4b9e      	ldr	r3, [pc, #632]	@ (8001bec <spiralInAndOut+0x324>)
 8001974:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001978:	4a9c      	ldr	r2, [pc, #624]	@ (8001bec <spiralInAndOut+0x324>)
 800197a:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 800197e:	2201      	movs	r2, #1
 8001980:	4618      	mov	r0, r3
 8001982:	f001 fde1 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f001 fa91 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[14].port, pinMap[14].pin, GPIO_PIN_SET);
 800198e:	4b97      	ldr	r3, [pc, #604]	@ (8001bec <spiralInAndOut+0x324>)
 8001990:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001994:	4a95      	ldr	r2, [pc, #596]	@ (8001bec <spiralInAndOut+0x324>)
 8001996:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	@ 0xb0
 800199a:	2201      	movs	r2, #1
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fdd3 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 fa83 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[13].port, pinMap[13].pin, GPIO_PIN_SET);
 80019aa:	4b90      	ldr	r3, [pc, #576]	@ (8001bec <spiralInAndOut+0x324>)
 80019ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80019b0:	4a8e      	ldr	r2, [pc, #568]	@ (8001bec <spiralInAndOut+0x324>)
 80019b2:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 80019b6:	2201      	movs	r2, #1
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 fdc5 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 fa75 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[12].port, pinMap[12].pin, GPIO_PIN_SET);
 80019c6:	4b89      	ldr	r3, [pc, #548]	@ (8001bec <spiralInAndOut+0x324>)
 80019c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019cc:	4a87      	ldr	r2, [pc, #540]	@ (8001bec <spiralInAndOut+0x324>)
 80019ce:	f8b2 1098 	ldrh.w	r1, [r2, #152]	@ 0x98
 80019d2:	2201      	movs	r2, #1
 80019d4:	4618      	mov	r0, r3
 80019d6:	f001 fdb7 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f001 fa67 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[8].port, pinMap[8].pin, GPIO_PIN_SET);
 80019e2:	4b82      	ldr	r3, [pc, #520]	@ (8001bec <spiralInAndOut+0x324>)
 80019e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80019e6:	4a81      	ldr	r2, [pc, #516]	@ (8001bec <spiralInAndOut+0x324>)
 80019e8:	f8b2 1068 	ldrh.w	r1, [r2, #104]	@ 0x68
 80019ec:	2201      	movs	r2, #1
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 fdaa 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 fa5a 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[4].port, pinMap[4].pin, GPIO_PIN_SET);
 80019fc:	4b7b      	ldr	r3, [pc, #492]	@ (8001bec <spiralInAndOut+0x324>)
 80019fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a00:	4a7a      	ldr	r2, [pc, #488]	@ (8001bec <spiralInAndOut+0x324>)
 8001a02:	8f11      	ldrh	r1, [r2, #56]	@ 0x38
 8001a04:	2201      	movs	r2, #1
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fd9e 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 fa4e 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_SET);
 8001a14:	4b75      	ldr	r3, [pc, #468]	@ (8001bec <spiralInAndOut+0x324>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	4a74      	ldr	r2, [pc, #464]	@ (8001bec <spiralInAndOut+0x324>)
 8001a1a:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 fd91 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f001 fa41 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_SET);
 8001a2e:	4b6f      	ldr	r3, [pc, #444]	@ (8001bec <spiralInAndOut+0x324>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a32:	4a6e      	ldr	r2, [pc, #440]	@ (8001bec <spiralInAndOut+0x324>)
 8001a34:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 fd84 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 fa34 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_SET);
 8001a48:	4b68      	ldr	r3, [pc, #416]	@ (8001bec <spiralInAndOut+0x324>)
 8001a4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a4c:	4a67      	ldr	r2, [pc, #412]	@ (8001bec <spiralInAndOut+0x324>)
 8001a4e:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8001a52:	2201      	movs	r2, #1
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 fd77 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 fa27 	bl	8002eb0 <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_SET);
 8001a62:	4b62      	ldr	r3, [pc, #392]	@ (8001bec <spiralInAndOut+0x324>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a66:	4a61      	ldr	r2, [pc, #388]	@ (8001bec <spiralInAndOut+0x324>)
 8001a68:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f001 fd6a 	bl	8003548 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 fa1a 	bl	8002eb0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_RESET);
 8001a7c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bec <spiralInAndOut+0x324>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a80:	4a5a      	ldr	r2, [pc, #360]	@ (8001bec <spiralInAndOut+0x324>)
 8001a82:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 8001a86:	2200      	movs	r2, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 fd5d 	bl	8003548 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fa0d 	bl	8002eb0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_RESET);
 8001a96:	4b55      	ldr	r3, [pc, #340]	@ (8001bec <spiralInAndOut+0x324>)
 8001a98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a9a:	4a54      	ldr	r2, [pc, #336]	@ (8001bec <spiralInAndOut+0x324>)
 8001a9c:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 fd50 	bl	8003548 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f001 fa00 	bl	8002eb0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_RESET);
 8001ab0:	4b4e      	ldr	r3, [pc, #312]	@ (8001bec <spiralInAndOut+0x324>)
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab4:	4a4d      	ldr	r2, [pc, #308]	@ (8001bec <spiralInAndOut+0x324>)
 8001ab6:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001aba:	2200      	movs	r2, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 fd43 	bl	8003548 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 f9f3 	bl	8002eb0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_RESET);
 8001aca:	4b48      	ldr	r3, [pc, #288]	@ (8001bec <spiralInAndOut+0x324>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	4a47      	ldr	r2, [pc, #284]	@ (8001bec <spiralInAndOut+0x324>)
 8001ad0:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f001 fd36 	bl	8003548 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f001 f9e6 	bl	8002eb0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[4].port, pinMap[4].pin, GPIO_PIN_RESET);
 8001ae4:	4b41      	ldr	r3, [pc, #260]	@ (8001bec <spiralInAndOut+0x324>)
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae8:	4a40      	ldr	r2, [pc, #256]	@ (8001bec <spiralInAndOut+0x324>)
 8001aea:	8f11      	ldrh	r1, [r2, #56]	@ 0x38
 8001aec:	2200      	movs	r2, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 fd2a 	bl	8003548 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f001 f9da 	bl	8002eb0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[8].port, pinMap[8].pin, GPIO_PIN_RESET);
 8001afc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bec <spiralInAndOut+0x324>)
 8001afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b00:	4a3a      	ldr	r2, [pc, #232]	@ (8001bec <spiralInAndOut+0x324>)
 8001b02:	f8b2 1068 	ldrh.w	r1, [r2, #104]	@ 0x68
 8001b06:	2200      	movs	r2, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 fd1d 	bl	8003548 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 f9cd 	bl	8002eb0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[12].port, pinMap[12].pin, GPIO_PIN_RESET);
 8001b16:	4b35      	ldr	r3, [pc, #212]	@ (8001bec <spiralInAndOut+0x324>)
 8001b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b1c:	4a33      	ldr	r2, [pc, #204]	@ (8001bec <spiralInAndOut+0x324>)
 8001b1e:	f8b2 1098 	ldrh.w	r1, [r2, #152]	@ 0x98
 8001b22:	2200      	movs	r2, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 fd0f 	bl	8003548 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f001 f9bf 	bl	8002eb0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[13].port, pinMap[13].pin, GPIO_PIN_RESET);
 8001b32:	4b2e      	ldr	r3, [pc, #184]	@ (8001bec <spiralInAndOut+0x324>)
 8001b34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001b38:	4a2c      	ldr	r2, [pc, #176]	@ (8001bec <spiralInAndOut+0x324>)
 8001b3a:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 8001b3e:	2200      	movs	r2, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f001 fd01 	bl	8003548 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f001 f9b1 	bl	8002eb0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[14].port, pinMap[14].pin, GPIO_PIN_RESET);
 8001b4e:	4b27      	ldr	r3, [pc, #156]	@ (8001bec <spiralInAndOut+0x324>)
 8001b50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001b54:	4a25      	ldr	r2, [pc, #148]	@ (8001bec <spiralInAndOut+0x324>)
 8001b56:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	@ 0xb0
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f001 fcf3 	bl	8003548 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f001 f9a3 	bl	8002eb0 <HAL_Delay>
	      HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_RESET);
 8001b6a:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <spiralInAndOut+0x324>)
 8001b6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001b70:	4a1e      	ldr	r2, [pc, #120]	@ (8001bec <spiralInAndOut+0x324>)
 8001b72:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 8001b76:	2200      	movs	r2, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 fce5 	bl	8003548 <HAL_GPIO_WritePin>
	      HAL_Delay(x);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f001 f995 	bl	8002eb0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[11].port, pinMap[11].pin, GPIO_PIN_RESET);
 8001b86:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <spiralInAndOut+0x324>)
 8001b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8c:	4a17      	ldr	r2, [pc, #92]	@ (8001bec <spiralInAndOut+0x324>)
 8001b8e:	f8b2 108c 	ldrh.w	r1, [r2, #140]	@ 0x8c
 8001b92:	2200      	movs	r2, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f001 fcd7 	bl	8003548 <HAL_GPIO_WritePin>
	      HAL_Delay(x);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f001 f987 	bl	8002eb0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[7].port, pinMap[7].pin, GPIO_PIN_RESET);
 8001ba2:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <spiralInAndOut+0x324>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba6:	4a11      	ldr	r2, [pc, #68]	@ (8001bec <spiralInAndOut+0x324>)
 8001ba8:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8001bac:	2200      	movs	r2, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 fcca 	bl	8003548 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 f97a 	bl	8002eb0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[3].port, pinMap[3].pin, GPIO_PIN_RESET);
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <spiralInAndOut+0x324>)
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <spiralInAndOut+0x324>)
 8001bc2:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 fcbe 	bl	8003548 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 f96e 	bl	8002eb0 <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[2].port, pinMap[2].pin, GPIO_PIN_RESET);
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <spiralInAndOut+0x324>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	4a04      	ldr	r2, [pc, #16]	@ (8001bec <spiralInAndOut+0x324>)
 8001bda:	8c11      	ldrh	r1, [r2, #32]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f001 fcb2 	bl	8003548 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	e002      	b.n	8001bf0 <spiralInAndOut+0x328>
 8001bea:	bf00      	nop
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	f001 f95e 	bl	8002eb0 <HAL_Delay>
	      HAL_GPIO_WritePin(pinMap[1].port, pinMap[1].pin, GPIO_PIN_RESET);
 8001bf4:	4bc1      	ldr	r3, [pc, #772]	@ (8001efc <spiralInAndOut+0x634>)
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	4ac0      	ldr	r2, [pc, #768]	@ (8001efc <spiralInAndOut+0x634>)
 8001bfa:	8a91      	ldrh	r1, [r2, #20]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 fca2 	bl	8003548 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f001 f952 	bl	8002eb0 <HAL_Delay>
	      HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_RESET);
 8001c0c:	4bbb      	ldr	r3, [pc, #748]	@ (8001efc <spiralInAndOut+0x634>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4aba      	ldr	r2, [pc, #744]	@ (8001efc <spiralInAndOut+0x634>)
 8001c12:	8911      	ldrh	r1, [r2, #8]
 8001c14:	2200      	movs	r2, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f001 fc96 	bl	8003548 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f001 f946 	bl	8002eb0 <HAL_Delay>
	  	      HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_SET);
 8001c24:	4bb5      	ldr	r3, [pc, #724]	@ (8001efc <spiralInAndOut+0x634>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4ab4      	ldr	r2, [pc, #720]	@ (8001efc <spiralInAndOut+0x634>)
 8001c2a:	8911      	ldrh	r1, [r2, #8]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f001 fc8a 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f001 f93a 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[4].port, pinMap[4].pin, GPIO_PIN_SET);
 8001c3c:	4baf      	ldr	r3, [pc, #700]	@ (8001efc <spiralInAndOut+0x634>)
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c40:	4aae      	ldr	r2, [pc, #696]	@ (8001efc <spiralInAndOut+0x634>)
 8001c42:	8f11      	ldrh	r1, [r2, #56]	@ 0x38
 8001c44:	2201      	movs	r2, #1
 8001c46:	4618      	mov	r0, r3
 8001c48:	f001 fc7e 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f001 f92e 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[8].port, pinMap[8].pin, GPIO_PIN_SET);
 8001c54:	4ba9      	ldr	r3, [pc, #676]	@ (8001efc <spiralInAndOut+0x634>)
 8001c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c58:	4aa8      	ldr	r2, [pc, #672]	@ (8001efc <spiralInAndOut+0x634>)
 8001c5a:	f8b2 1068 	ldrh.w	r1, [r2, #104]	@ 0x68
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4618      	mov	r0, r3
 8001c62:	f001 fc71 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 f921 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[12].port, pinMap[12].pin, GPIO_PIN_SET);
 8001c6e:	4ba3      	ldr	r3, [pc, #652]	@ (8001efc <spiralInAndOut+0x634>)
 8001c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c74:	4aa1      	ldr	r2, [pc, #644]	@ (8001efc <spiralInAndOut+0x634>)
 8001c76:	f8b2 1098 	ldrh.w	r1, [r2, #152]	@ 0x98
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 fc63 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 f913 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[13].port, pinMap[13].pin, GPIO_PIN_SET);
 8001c8a:	4b9c      	ldr	r3, [pc, #624]	@ (8001efc <spiralInAndOut+0x634>)
 8001c8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001c90:	4a9a      	ldr	r2, [pc, #616]	@ (8001efc <spiralInAndOut+0x634>)
 8001c92:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 8001c96:	2201      	movs	r2, #1
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f001 fc55 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 f905 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[14].port, pinMap[14].pin, GPIO_PIN_SET);
 8001ca6:	4b95      	ldr	r3, [pc, #596]	@ (8001efc <spiralInAndOut+0x634>)
 8001ca8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001cac:	4a93      	ldr	r2, [pc, #588]	@ (8001efc <spiralInAndOut+0x634>)
 8001cae:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	@ 0xb0
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 fc47 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 f8f7 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_SET);
 8001cc2:	4b8e      	ldr	r3, [pc, #568]	@ (8001efc <spiralInAndOut+0x634>)
 8001cc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001cc8:	4a8c      	ldr	r2, [pc, #560]	@ (8001efc <spiralInAndOut+0x634>)
 8001cca:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 fc39 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 f8e9 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[11].port, pinMap[11].pin, GPIO_PIN_SET);
 8001cde:	4b87      	ldr	r3, [pc, #540]	@ (8001efc <spiralInAndOut+0x634>)
 8001ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ce4:	4a85      	ldr	r2, [pc, #532]	@ (8001efc <spiralInAndOut+0x634>)
 8001ce6:	f8b2 108c 	ldrh.w	r1, [r2, #140]	@ 0x8c
 8001cea:	2201      	movs	r2, #1
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 fc2b 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 f8db 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[7].port, pinMap[7].pin, GPIO_PIN_SET);
 8001cfa:	4b80      	ldr	r3, [pc, #512]	@ (8001efc <spiralInAndOut+0x634>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfe:	4a7f      	ldr	r2, [pc, #508]	@ (8001efc <spiralInAndOut+0x634>)
 8001d00:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8001d04:	2201      	movs	r2, #1
 8001d06:	4618      	mov	r0, r3
 8001d08:	f001 fc1e 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f001 f8ce 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[3].port, pinMap[3].pin, GPIO_PIN_SET);
 8001d14:	4b79      	ldr	r3, [pc, #484]	@ (8001efc <spiralInAndOut+0x634>)
 8001d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d18:	4a78      	ldr	r2, [pc, #480]	@ (8001efc <spiralInAndOut+0x634>)
 8001d1a:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f001 fc12 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 f8c2 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[2].port, pinMap[2].pin, GPIO_PIN_SET);
 8001d2c:	4b73      	ldr	r3, [pc, #460]	@ (8001efc <spiralInAndOut+0x634>)
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	4a72      	ldr	r2, [pc, #456]	@ (8001efc <spiralInAndOut+0x634>)
 8001d32:	8c11      	ldrh	r1, [r2, #32]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 fc06 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f001 f8b6 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[1].port, pinMap[1].pin, GPIO_PIN_SET);
 8001d44:	4b6d      	ldr	r3, [pc, #436]	@ (8001efc <spiralInAndOut+0x634>)
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	4a6c      	ldr	r2, [pc, #432]	@ (8001efc <spiralInAndOut+0x634>)
 8001d4a:	8a91      	ldrh	r1, [r2, #20]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f001 fbfa 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f001 f8aa 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_SET);
 8001d5c:	4b67      	ldr	r3, [pc, #412]	@ (8001efc <spiralInAndOut+0x634>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d60:	4a66      	ldr	r2, [pc, #408]	@ (8001efc <spiralInAndOut+0x634>)
 8001d62:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8001d66:	2201      	movs	r2, #1
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 fbed 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 f89d 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_SET);
 8001d76:	4b61      	ldr	r3, [pc, #388]	@ (8001efc <spiralInAndOut+0x634>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7a:	4a60      	ldr	r2, [pc, #384]	@ (8001efc <spiralInAndOut+0x634>)
 8001d7c:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 8001d80:	2201      	movs	r2, #1
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 fbe0 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f001 f890 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_SET);
 8001d90:	4b5a      	ldr	r3, [pc, #360]	@ (8001efc <spiralInAndOut+0x634>)
 8001d92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d94:	4a59      	ldr	r2, [pc, #356]	@ (8001efc <spiralInAndOut+0x634>)
 8001d96:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f001 fbd3 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 f883 	bl	8002eb0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_SET);
 8001daa:	4b54      	ldr	r3, [pc, #336]	@ (8001efc <spiralInAndOut+0x634>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	4a53      	ldr	r2, [pc, #332]	@ (8001efc <spiralInAndOut+0x634>)
 8001db0:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001db4:	2201      	movs	r2, #1
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 fbc6 	bl	8003548 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 f876 	bl	8002eb0 <HAL_Delay>
	  		          HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_RESET);
 8001dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8001efc <spiralInAndOut+0x634>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc8:	4a4c      	ldr	r2, [pc, #304]	@ (8001efc <spiralInAndOut+0x634>)
 8001dca:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001dce:	2200      	movs	r2, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f001 fbb9 	bl	8003548 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 f869 	bl	8002eb0 <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_RESET);
 8001dde:	4b47      	ldr	r3, [pc, #284]	@ (8001efc <spiralInAndOut+0x634>)
 8001de0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001de2:	4a46      	ldr	r2, [pc, #280]	@ (8001efc <spiralInAndOut+0x634>)
 8001de4:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8001de8:	2200      	movs	r2, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f001 fbac 	bl	8003548 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f001 f85c 	bl	8002eb0 <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_RESET);
 8001df8:	4b40      	ldr	r3, [pc, #256]	@ (8001efc <spiralInAndOut+0x634>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfc:	4a3f      	ldr	r2, [pc, #252]	@ (8001efc <spiralInAndOut+0x634>)
 8001dfe:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 8001e02:	2200      	movs	r2, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f001 fb9f 	bl	8003548 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f001 f84f 	bl	8002eb0 <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_RESET);
 8001e12:	4b3a      	ldr	r3, [pc, #232]	@ (8001efc <spiralInAndOut+0x634>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	4a39      	ldr	r2, [pc, #228]	@ (8001efc <spiralInAndOut+0x634>)
 8001e18:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 fb92 	bl	8003548 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f001 f842 	bl	8002eb0 <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[1].port, pinMap[1].pin, GPIO_PIN_RESET);
 8001e2c:	4b33      	ldr	r3, [pc, #204]	@ (8001efc <spiralInAndOut+0x634>)
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	4a32      	ldr	r2, [pc, #200]	@ (8001efc <spiralInAndOut+0x634>)
 8001e32:	8a91      	ldrh	r1, [r2, #20]
 8001e34:	2200      	movs	r2, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f001 fb86 	bl	8003548 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 f836 	bl	8002eb0 <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[2].port, pinMap[2].pin, GPIO_PIN_RESET);
 8001e44:	4b2d      	ldr	r3, [pc, #180]	@ (8001efc <spiralInAndOut+0x634>)
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	4a2c      	ldr	r2, [pc, #176]	@ (8001efc <spiralInAndOut+0x634>)
 8001e4a:	8c11      	ldrh	r1, [r2, #32]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f001 fb7a 	bl	8003548 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 f82a 	bl	8002eb0 <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[3].port, pinMap[3].pin, GPIO_PIN_RESET);
 8001e5c:	4b27      	ldr	r3, [pc, #156]	@ (8001efc <spiralInAndOut+0x634>)
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	4a26      	ldr	r2, [pc, #152]	@ (8001efc <spiralInAndOut+0x634>)
 8001e62:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001e64:	2200      	movs	r2, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f001 fb6e 	bl	8003548 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 f81e 	bl	8002eb0 <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[7].port, pinMap[7].pin, GPIO_PIN_RESET);
 8001e74:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <spiralInAndOut+0x634>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e78:	4a20      	ldr	r2, [pc, #128]	@ (8001efc <spiralInAndOut+0x634>)
 8001e7a:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f001 fb61 	bl	8003548 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 f811 	bl	8002eb0 <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[11].port, pinMap[11].pin, GPIO_PIN_RESET);
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <spiralInAndOut+0x634>)
 8001e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e94:	4a19      	ldr	r2, [pc, #100]	@ (8001efc <spiralInAndOut+0x634>)
 8001e96:	f8b2 108c 	ldrh.w	r1, [r2, #140]	@ 0x8c
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 fb53 	bl	8003548 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 f803 	bl	8002eb0 <HAL_Delay>
	  			      HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_RESET);
 8001eaa:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <spiralInAndOut+0x634>)
 8001eac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001eb0:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <spiralInAndOut+0x634>)
 8001eb2:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 fb45 	bl	8003548 <HAL_GPIO_WritePin>
	  			      HAL_Delay(x);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fff5 	bl	8002eb0 <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[14].port, pinMap[14].pin, GPIO_PIN_RESET);
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <spiralInAndOut+0x634>)
 8001ec8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8001efc <spiralInAndOut+0x634>)
 8001ece:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	@ 0xb0
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 fb37 	bl	8003548 <HAL_GPIO_WritePin>
	  			      HAL_Delay(x);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 ffe7 	bl	8002eb0 <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[13].port, pinMap[13].pin, GPIO_PIN_RESET);
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <spiralInAndOut+0x634>)
 8001ee4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001ee8:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <spiralInAndOut+0x634>)
 8001eea:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 8001eee:	2200      	movs	r2, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f001 fb29 	bl	8003548 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	e001      	b.n	8001f00 <spiralInAndOut+0x638>
 8001efc:	20000000 	.word	0x20000000
 8001f00:	f000 ffd6 	bl	8002eb0 <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[12].port, pinMap[12].pin, GPIO_PIN_RESET);
 8001f04:	4b1f      	ldr	r3, [pc, #124]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f0c:	f8b2 1098 	ldrh.w	r1, [r2, #152]	@ 0x98
 8001f10:	2200      	movs	r2, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f001 fb18 	bl	8003548 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 ffc8 	bl	8002eb0 <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[8].port, pinMap[8].pin, GPIO_PIN_RESET);
 8001f20:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f24:	4a17      	ldr	r2, [pc, #92]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f26:	f8b2 1068 	ldrh.w	r1, [r2, #104]	@ 0x68
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f001 fb0b 	bl	8003548 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 ffbb 	bl	8002eb0 <HAL_Delay>
	  			      HAL_GPIO_WritePin(pinMap[4].port, pinMap[4].pin, GPIO_PIN_RESET);
 8001f3a:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f3e:	4a11      	ldr	r2, [pc, #68]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f40:	8f11      	ldrh	r1, [r2, #56]	@ 0x38
 8001f42:	2200      	movs	r2, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f001 faff 	bl	8003548 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 ffaf 	bl	8002eb0 <HAL_Delay>
	  			      HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_RESET);
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4a0b      	ldr	r2, [pc, #44]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f58:	8911      	ldrh	r1, [r2, #8]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 faf3 	bl	8003548 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 ffa3 	bl	8002eb0 <HAL_Delay>
  for(int i = 0; i<6; i++)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	f77f acb2 	ble.w	80018dc <spiralInAndOut+0x14>
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000000 	.word	0x20000000

08001f88 <goThroughAllLedsOneAtATime>:
//go through all leds one at a time
void goThroughAllLedsOneAtATime()
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af00      	add	r7, sp, #0
  int x = 15;
 8001f8e:	230f      	movs	r3, #15
 8001f90:	603b      	str	r3, [r7, #0]
  disableAllPins();
 8001f92:	f7fe fac7 	bl	8000524 <disableAllPins>
  for(int y = 0; y<5; y++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9a:	e1d6      	b.n	800234a <goThroughAllLedsOneAtATime+0x3c2>
  {
    //0-3
    for(int count = 4; count != 0; count--)
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	623b      	str	r3, [r7, #32]
 8001fa0:	e06f      	b.n	8002082 <goThroughAllLedsOneAtATime+0xfa>
    {
    	HAL_GPIO_WritePin(layers[count-1].port, layers[count-1].pin, GPIO_PIN_SET);
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	1e5a      	subs	r2, r3, #1
 8001fa6:	49ba      	ldr	r1, [pc, #744]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	1e5a      	subs	r2, r3, #1
 8001fba:	49b5      	ldr	r1, [pc, #724]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3308      	adds	r3, #8
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f001 fabb 	bl	8003548 <HAL_GPIO_WritePin>
      for(int i = 0; i<4; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	e036      	b.n	8002046 <goThroughAllLedsOneAtATime+0xbe>
      {
    	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8001fd8:	49ae      	ldr	r1, [pc, #696]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	49aa      	ldr	r1, [pc, #680]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3308      	adds	r3, #8
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4619      	mov	r1, r3
 8002000:	f001 faa2 	bl	8003548 <HAL_GPIO_WritePin>
    	  HAL_Delay(x);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f000 ff52 	bl	8002eb0 <HAL_Delay>
    	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 800200c:	49a1      	ldr	r1, [pc, #644]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3304      	adds	r3, #4
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	499d      	ldr	r1, [pc, #628]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	3308      	adds	r3, #8
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	2201      	movs	r2, #1
 8002032:	4619      	mov	r1, r3
 8002034:	f001 fa88 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_Delay(x);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 ff38 	bl	8002eb0 <HAL_Delay>
      for(int i = 0; i<4; i++)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	3301      	adds	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	2b03      	cmp	r3, #3
 800204a:	ddc5      	ble.n	8001fd8 <goThroughAllLedsOneAtATime+0x50>
      }
      HAL_GPIO_WritePin(layers[count-1].port, layers[count-1].pin, GPIO_PIN_RESET);
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	1e5a      	subs	r2, r3, #1
 8002050:	498f      	ldr	r1, [pc, #572]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3304      	adds	r3, #4
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	1e5a      	subs	r2, r3, #1
 8002064:	498a      	ldr	r1, [pc, #552]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	3308      	adds	r3, #8
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	2200      	movs	r2, #0
 8002076:	4619      	mov	r1, r3
 8002078:	f001 fa66 	bl	8003548 <HAL_GPIO_WritePin>
    for(int count = 4; count != 0; count--)
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	3b01      	subs	r3, #1
 8002080:	623b      	str	r3, [r7, #32]
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d18c      	bne.n	8001fa2 <goThroughAllLedsOneAtATime+0x1a>
    }
    //4-7
    for(int count = 0; count < 4; count++)
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	e06b      	b.n	8002166 <goThroughAllLedsOneAtATime+0x1de>
    {
    	HAL_GPIO_WritePin(layers[count].port, layers[count].pin, GPIO_PIN_SET);
 800208e:	4980      	ldr	r1, [pc, #512]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	3304      	adds	r3, #4
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	497b      	ldr	r1, [pc, #492]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	3308      	adds	r3, #8
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	2201      	movs	r2, #1
 80020b4:	4619      	mov	r1, r3
 80020b6:	f001 fa47 	bl	8003548 <HAL_GPIO_WritePin>
      for(int i = 4; i<8; i++)
 80020ba:	2304      	movs	r3, #4
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e036      	b.n	800212e <goThroughAllLedsOneAtATime+0x1a6>
      {
    	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 80020c0:	4974      	ldr	r1, [pc, #464]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	3304      	adds	r3, #4
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	4970      	ldr	r1, [pc, #448]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3308      	adds	r3, #8
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	2200      	movs	r2, #0
 80020e6:	4619      	mov	r1, r3
 80020e8:	f001 fa2e 	bl	8003548 <HAL_GPIO_WritePin>
    	  HAL_Delay(x);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fede 	bl	8002eb0 <HAL_Delay>
    	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 80020f4:	4967      	ldr	r1, [pc, #412]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3304      	adds	r3, #4
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	4963      	ldr	r1, [pc, #396]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	3308      	adds	r3, #8
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	2201      	movs	r2, #1
 800211a:	4619      	mov	r1, r3
 800211c:	f001 fa14 	bl	8003548 <HAL_GPIO_WritePin>
    	  HAL_Delay(x);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fec4 	bl	8002eb0 <HAL_Delay>
      for(int i = 4; i<8; i++)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3301      	adds	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b07      	cmp	r3, #7
 8002132:	ddc5      	ble.n	80020c0 <goThroughAllLedsOneAtATime+0x138>
      }
      HAL_GPIO_WritePin(layers[count].port, layers[count].pin, GPIO_PIN_RESET);
 8002134:	4956      	ldr	r1, [pc, #344]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	3304      	adds	r3, #4
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	4952      	ldr	r1, [pc, #328]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	3308      	adds	r3, #8
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	2200      	movs	r2, #0
 800215a:	4619      	mov	r1, r3
 800215c:	f001 f9f4 	bl	8003548 <HAL_GPIO_WritePin>
    for(int count = 0; count < 4; count++)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	3301      	adds	r3, #1
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b03      	cmp	r3, #3
 800216a:	dd90      	ble.n	800208e <goThroughAllLedsOneAtATime+0x106>
    }
    //8-11
    for(int count = 4; count != 0; count--)
 800216c:	2304      	movs	r3, #4
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	e06f      	b.n	8002252 <goThroughAllLedsOneAtATime+0x2ca>
    {
    	HAL_GPIO_WritePin(layers[count-1].port, layers[count-1].pin, GPIO_PIN_SET);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1e5a      	subs	r2, r3, #1
 8002176:	4946      	ldr	r1, [pc, #280]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	3304      	adds	r3, #4
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1e5a      	subs	r2, r3, #1
 800218a:	4941      	ldr	r1, [pc, #260]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	3308      	adds	r3, #8
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	4619      	mov	r1, r3
 800219e:	f001 f9d3 	bl	8003548 <HAL_GPIO_WritePin>
      for(int i = 8; i<12; i++)
 80021a2:	2308      	movs	r3, #8
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	e036      	b.n	8002216 <goThroughAllLedsOneAtATime+0x28e>
      {
    	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 80021a8:	493a      	ldr	r1, [pc, #232]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	3304      	adds	r3, #4
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	4936      	ldr	r1, [pc, #216]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	3308      	adds	r3, #8
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	2200      	movs	r2, #0
 80021ce:	4619      	mov	r1, r3
 80021d0:	f001 f9ba 	bl	8003548 <HAL_GPIO_WritePin>
    	      	  HAL_Delay(x);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fe6a 	bl	8002eb0 <HAL_Delay>
    	      	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 80021dc:	492d      	ldr	r1, [pc, #180]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	3304      	adds	r3, #4
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	4929      	ldr	r1, [pc, #164]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	3308      	adds	r3, #8
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	4619      	mov	r1, r3
 8002204:	f001 f9a0 	bl	8003548 <HAL_GPIO_WritePin>
    	      	  HAL_Delay(x);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fe50 	bl	8002eb0 <HAL_Delay>
      for(int i = 8; i<12; i++)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3301      	adds	r3, #1
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b0b      	cmp	r3, #11
 800221a:	ddc5      	ble.n	80021a8 <goThroughAllLedsOneAtATime+0x220>
      }
      HAL_GPIO_WritePin(layers[count-1].port, layers[count-1].pin, GPIO_PIN_RESET);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1e5a      	subs	r2, r3, #1
 8002220:	491b      	ldr	r1, [pc, #108]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	3304      	adds	r3, #4
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1e5a      	subs	r2, r3, #1
 8002234:	4916      	ldr	r1, [pc, #88]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	3308      	adds	r3, #8
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	2200      	movs	r2, #0
 8002246:	4619      	mov	r1, r3
 8002248:	f001 f97e 	bl	8003548 <HAL_GPIO_WritePin>
    for(int count = 4; count != 0; count--)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	3b01      	subs	r3, #1
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d18c      	bne.n	8002172 <goThroughAllLedsOneAtATime+0x1ea>
    }
    //12-15
    for(int count = 0; count < 4; count++)
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	e06f      	b.n	800233e <goThroughAllLedsOneAtATime+0x3b6>
    {
    	HAL_GPIO_WritePin(layers[count].port, layers[count].pin, GPIO_PIN_SET);
 800225e:	490c      	ldr	r1, [pc, #48]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	3304      	adds	r3, #4
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	4907      	ldr	r1, [pc, #28]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3308      	adds	r3, #8
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	2201      	movs	r2, #1
 8002284:	4619      	mov	r1, r3
 8002286:	f001 f95f 	bl	8003548 <HAL_GPIO_WritePin>
      for(int i = 12; i<16; i++)
 800228a:	230c      	movs	r3, #12
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	e03a      	b.n	8002306 <goThroughAllLedsOneAtATime+0x37e>
 8002290:	200000c0 	.word	0x200000c0
 8002294:	20000000 	.word	0x20000000
      {
    	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8002298:	4930      	ldr	r1, [pc, #192]	@ (800235c <goThroughAllLedsOneAtATime+0x3d4>)
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3304      	adds	r3, #4
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	492c      	ldr	r1, [pc, #176]	@ (800235c <goThroughAllLedsOneAtATime+0x3d4>)
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3308      	adds	r3, #8
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	2200      	movs	r2, #0
 80022be:	4619      	mov	r1, r3
 80022c0:	f001 f942 	bl	8003548 <HAL_GPIO_WritePin>
    	  HAL_Delay(x);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fdf2 	bl	8002eb0 <HAL_Delay>
    	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 80022cc:	4923      	ldr	r1, [pc, #140]	@ (800235c <goThroughAllLedsOneAtATime+0x3d4>)
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	3304      	adds	r3, #4
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	491f      	ldr	r1, [pc, #124]	@ (800235c <goThroughAllLedsOneAtATime+0x3d4>)
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	3308      	adds	r3, #8
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	2201      	movs	r2, #1
 80022f2:	4619      	mov	r1, r3
 80022f4:	f001 f928 	bl	8003548 <HAL_GPIO_WritePin>
    	  HAL_Delay(x);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fdd8 	bl	8002eb0 <HAL_Delay>
      for(int i = 12; i<16; i++)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3301      	adds	r3, #1
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	ddc5      	ble.n	8002298 <goThroughAllLedsOneAtATime+0x310>
      }
      HAL_GPIO_WritePin(layers[count].port, layers[count].pin, GPIO_PIN_RESET);
 800230c:	4914      	ldr	r1, [pc, #80]	@ (8002360 <goThroughAllLedsOneAtATime+0x3d8>)
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	3304      	adds	r3, #4
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	4910      	ldr	r1, [pc, #64]	@ (8002360 <goThroughAllLedsOneAtATime+0x3d8>)
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	3308      	adds	r3, #8
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	4619      	mov	r1, r3
 8002334:	f001 f908 	bl	8003548 <HAL_GPIO_WritePin>
    for(int count = 0; count < 4; count++)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	3301      	adds	r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b03      	cmp	r3, #3
 8002342:	dd8c      	ble.n	800225e <goThroughAllLedsOneAtATime+0x2d6>
  for(int y = 0; y<5; y++)
 8002344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002346:	3301      	adds	r3, #1
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	2b04      	cmp	r3, #4
 800234e:	f77f ae25 	ble.w	8001f9c <goThroughAllLedsOneAtATime+0x14>
    }
  }
}
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	@ 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000000 	.word	0x20000000
 8002360:	200000c0 	.word	0x200000c0

08002364 <processBluetoothCommands>:
} CommandQueueItem;

CommandQueueItem commandQueue[MAX_COMMAND_QUEUE];
int commandQueueSize = 0;

void processBluetoothCommands(char* recv_str) {
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	b09b      	sub	sp, #108	@ 0x6c
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    char commandOn[40];
    char commandOff[40];

    strcpy(commandOn, recv_str);
 800236c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4618      	mov	r0, r3
 8002374:	f003 f930 	bl	80055d8 <strcpy>
    strcpy(commandOff, recv_str);
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 f92a 	bl	80055d8 <strcpy>
    strcat(commandOn, "_on");
 8002384:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002388:	4618      	mov	r0, r3
 800238a:	f7fd ff2d 	bl	80001e8 <strlen>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002396:	4413      	add	r3, r2
 8002398:	4a65      	ldr	r2, [pc, #404]	@ (8002530 <processBluetoothCommands+0x1cc>)
 800239a:	6810      	ldr	r0, [r2, #0]
 800239c:	6018      	str	r0, [r3, #0]
    strcat(commandOff, "_off");
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fd ff20 	bl	80001e8 <strlen>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	4413      	add	r3, r2
 80023b2:	4a60      	ldr	r2, [pc, #384]	@ (8002534 <processBluetoothCommands+0x1d0>)
 80023b4:	6810      	ldr	r0, [r2, #0]
 80023b6:	6018      	str	r0, [r3, #0]
 80023b8:	7912      	ldrb	r2, [r2, #4]
 80023ba:	711a      	strb	r2, [r3, #4]

    // Check if the received command is to turn on
    if (strstr(recv_str, "_on")) {
 80023bc:	495c      	ldr	r1, [pc, #368]	@ (8002530 <processBluetoothCommands+0x1cc>)
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f003 f8d0 	bl	8005564 <strstr>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d047      	beq.n	800245a <processBluetoothCommands+0xf6>
        // Remove "_on" from the command
        recv_str[strlen(recv_str) - 3] = '\0';
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fd ff0c 	bl	80001e8 <strlen>
 80023d0:	4603      	mov	r3, r0
 80023d2:	3b03      	subs	r3, #3
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4413      	add	r3, r2
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]

        // Check if the command is already in the queue
        for (int j = 0; j < commandQueueSize; ++j) {
 80023dc:	2300      	movs	r3, #0
 80023de:	667b      	str	r3, [r7, #100]	@ 0x64
 80023e0:	e012      	b.n	8002408 <processBluetoothCommands+0xa4>
            if (!strcmp(commandQueue[j].command, recv_str)) {
 80023e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	4a52      	ldr	r2, [pc, #328]	@ (8002538 <processBluetoothCommands+0x1d4>)
 80023f0:	4413      	add	r3, r2
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fd feed 	bl	80001d4 <strcmp>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8093 	beq.w	8002528 <processBluetoothCommands+0x1c4>
        for (int j = 0; j < commandQueueSize; ++j) {
 8002402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002404:	3301      	adds	r3, #1
 8002406:	667b      	str	r3, [r7, #100]	@ 0x64
 8002408:	4b4c      	ldr	r3, [pc, #304]	@ (800253c <processBluetoothCommands+0x1d8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800240e:	429a      	cmp	r2, r3
 8002410:	dbe7      	blt.n	80023e2 <processBluetoothCommands+0x7e>
                return;
            }
        }

        // Add the command to the queue
        if (commandQueueSize < MAX_COMMAND_QUEUE) {
 8002412:	4b4a      	ldr	r3, [pc, #296]	@ (800253c <processBluetoothCommands+0x1d8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b09      	cmp	r3, #9
 8002418:	f300 8087 	bgt.w	800252a <processBluetoothCommands+0x1c6>
            strcpy(commandQueue[commandQueueSize].command, recv_str);
 800241c:	4b47      	ldr	r3, [pc, #284]	@ (800253c <processBluetoothCommands+0x1d8>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	4a43      	ldr	r2, [pc, #268]	@ (8002538 <processBluetoothCommands+0x1d4>)
 800242c:	4413      	add	r3, r2
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4618      	mov	r0, r3
 8002432:	f003 f8d1 	bl	80055d8 <strcpy>
            commandQueue[commandQueueSize].active = true;
 8002436:	4b41      	ldr	r3, [pc, #260]	@ (800253c <processBluetoothCommands+0x1d8>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	493f      	ldr	r1, [pc, #252]	@ (8002538 <processBluetoothCommands+0x1d4>)
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	440b      	add	r3, r1
 8002448:	3328      	adds	r3, #40	@ 0x28
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
            commandQueueSize++;
 800244e:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <processBluetoothCommands+0x1d8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3301      	adds	r3, #1
 8002454:	4a39      	ldr	r2, [pc, #228]	@ (800253c <processBluetoothCommands+0x1d8>)
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e067      	b.n	800252a <processBluetoothCommands+0x1c6>
        }
    } else if (strstr(recv_str, "_off")) {
 800245a:	4936      	ldr	r1, [pc, #216]	@ (8002534 <processBluetoothCommands+0x1d0>)
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f003 f881 	bl	8005564 <strstr>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d060      	beq.n	800252a <processBluetoothCommands+0x1c6>
        // Remove "_off" from the command
        recv_str[strlen(recv_str) - 4] = '\0';
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7fd febd 	bl	80001e8 <strlen>
 800246e:	4603      	mov	r3, r0
 8002470:	3b04      	subs	r3, #4
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]

        // Deactivate the command in the queue
        for (int j = 0; j < commandQueueSize; ++j) {
 800247a:	2300      	movs	r3, #0
 800247c:	663b      	str	r3, [r7, #96]	@ 0x60
 800247e:	e04d      	b.n	800251c <processBluetoothCommands+0x1b8>
            if (!strcmp(commandQueue[j].command, recv_str)) {
 8002480:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	4a2a      	ldr	r2, [pc, #168]	@ (8002538 <processBluetoothCommands+0x1d4>)
 800248e:	4413      	add	r3, r2
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fd fe9e 	bl	80001d4 <strcmp>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d13b      	bne.n	8002516 <processBluetoothCommands+0x1b2>
                // Remove the command from the queue
                for (int k = j; k < commandQueueSize - 1; ++k) {
 800249e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024a2:	e02c      	b.n	80024fe <processBluetoothCommands+0x19a>
                    commandQueue[k] = commandQueue[k + 1];
 80024a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	4823      	ldr	r0, [pc, #140]	@ (8002538 <processBluetoothCommands+0x1d4>)
 80024aa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80024ac:	460b      	mov	r3, r1
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	4418      	add	r0, r3
 80024b8:	491f      	ldr	r1, [pc, #124]	@ (8002538 <processBluetoothCommands+0x1d4>)
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4413      	add	r3, r2
 80024c4:	440b      	add	r3, r1
 80024c6:	f103 0420 	add.w	r4, r3, #32
 80024ca:	4602      	mov	r2, r0
 80024cc:	4619      	mov	r1, r3
 80024ce:	f8d1 c000 	ldr.w	ip, [r1]
 80024d2:	684e      	ldr	r6, [r1, #4]
 80024d4:	688d      	ldr	r5, [r1, #8]
 80024d6:	68c9      	ldr	r1, [r1, #12]
 80024d8:	f8c2 c000 	str.w	ip, [r2]
 80024dc:	6056      	str	r6, [r2, #4]
 80024de:	6095      	str	r5, [r2, #8]
 80024e0:	60d1      	str	r1, [r2, #12]
 80024e2:	3310      	adds	r3, #16
 80024e4:	3010      	adds	r0, #16
 80024e6:	42a3      	cmp	r3, r4
 80024e8:	d1ef      	bne.n	80024ca <processBluetoothCommands+0x166>
 80024ea:	4602      	mov	r2, r0
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	6010      	str	r0, [r2, #0]
 80024f2:	6051      	str	r1, [r2, #4]
 80024f4:	7a1b      	ldrb	r3, [r3, #8]
 80024f6:	7213      	strb	r3, [r2, #8]
                for (int k = j; k < commandQueueSize - 1; ++k) {
 80024f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024fa:	3301      	adds	r3, #1
 80024fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024fe:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <processBluetoothCommands+0x1d8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	3b01      	subs	r3, #1
 8002504:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002506:	429a      	cmp	r2, r3
 8002508:	dbcc      	blt.n	80024a4 <processBluetoothCommands+0x140>
                }
                commandQueueSize--;
 800250a:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <processBluetoothCommands+0x1d8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3b01      	subs	r3, #1
 8002510:	4a0a      	ldr	r2, [pc, #40]	@ (800253c <processBluetoothCommands+0x1d8>)
 8002512:	6013      	str	r3, [r2, #0]
                return;
 8002514:	e009      	b.n	800252a <processBluetoothCommands+0x1c6>
        for (int j = 0; j < commandQueueSize; ++j) {
 8002516:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002518:	3301      	adds	r3, #1
 800251a:	663b      	str	r3, [r7, #96]	@ 0x60
 800251c:	4b07      	ldr	r3, [pc, #28]	@ (800253c <processBluetoothCommands+0x1d8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002522:	429a      	cmp	r2, r3
 8002524:	dbac      	blt.n	8002480 <processBluetoothCommands+0x11c>
 8002526:	e000      	b.n	800252a <processBluetoothCommands+0x1c6>
                return;
 8002528:	bf00      	nop
            }
        }
    }
}
 800252a:	376c      	adds	r7, #108	@ 0x6c
 800252c:	46bd      	mov	sp, r7
 800252e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002530:	080056d0 	.word	0x080056d0
 8002534:	080056d4 	.word	0x080056d4
 8002538:	2000021c 	.word	0x2000021c
 800253c:	200003b8 	.word	0x200003b8

08002540 <executeCommandQueue>:




void executeCommandQueue() {
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
    for (int j = 0; j < commandQueueSize; ++j) {
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	e0c2      	b.n	80026d2 <executeCommandQueue+0x192>
        if (commandQueue[j].active) {
 800254c:	4966      	ldr	r1, [pc, #408]	@ (80026e8 <executeCommandQueue+0x1a8>)
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	440b      	add	r3, r1
 800255c:	3328      	adds	r3, #40	@ 0x28
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80b3 	beq.w	80026cc <executeCommandQueue+0x18c>
            if (!strcmp(commandQueue[j].command, COMMAND_FLICKER_ON)) {
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	4a5d      	ldr	r2, [pc, #372]	@ (80026e8 <executeCommandQueue+0x1a8>)
 8002574:	4413      	add	r3, r2
 8002576:	495d      	ldr	r1, [pc, #372]	@ (80026ec <executeCommandQueue+0x1ac>)
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd fe2b 	bl	80001d4 <strcmp>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <executeCommandQueue+0x4a>
                flickerOn();
 8002584:	f7fd ffb0 	bl	80004e8 <flickerOn>
 8002588:	e0a0      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_LAYER_UP_DOWN)) {
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	4a54      	ldr	r2, [pc, #336]	@ (80026e8 <executeCommandQueue+0x1a8>)
 8002598:	4413      	add	r3, r2
 800259a:	4955      	ldr	r1, [pc, #340]	@ (80026f0 <executeCommandQueue+0x1b0>)
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd fe19 	bl	80001d4 <strcmp>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <executeCommandQueue+0x6e>
                turnOnAndOffAllByLayerUpAndDownNotTimed();
 80025a8:	f7fe f88e 	bl	80006c8 <turnOnAndOffAllByLayerUpAndDownNotTimed>
 80025ac:	e08e      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_COLUMNS_SIDEWAYS)) {
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	4a4b      	ldr	r2, [pc, #300]	@ (80026e8 <executeCommandQueue+0x1a8>)
 80025bc:	4413      	add	r3, r2
 80025be:	494d      	ldr	r1, [pc, #308]	@ (80026f4 <executeCommandQueue+0x1b4>)
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd fe07 	bl	80001d4 <strcmp>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <executeCommandQueue+0x92>
                turnOnAndOffAllByColumnSideways();
 80025cc:	f7fe f92c 	bl	8000828 <turnOnAndOffAllByColumnSideways>
 80025d0:	e07c      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_STOMP_UP_DOWN)) {
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	4a42      	ldr	r2, [pc, #264]	@ (80026e8 <executeCommandQueue+0x1a8>)
 80025e0:	4413      	add	r3, r2
 80025e2:	4945      	ldr	r1, [pc, #276]	@ (80026f8 <executeCommandQueue+0x1b8>)
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd fdf5 	bl	80001d4 <strcmp>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <executeCommandQueue+0xb6>
                layerstompUpAndDown();
 80025f0:	f7fe fb8a 	bl	8000d08 <layerstompUpAndDown>
 80025f4:	e06a      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_FLICKER_OFF)) {
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	4a39      	ldr	r2, [pc, #228]	@ (80026e8 <executeCommandQueue+0x1a8>)
 8002604:	4413      	add	r3, r2
 8002606:	493d      	ldr	r1, [pc, #244]	@ (80026fc <executeCommandQueue+0x1bc>)
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd fde3 	bl	80001d4 <strcmp>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <executeCommandQueue+0xda>
                flickerOff();
 8002614:	f7fe fc74 	bl	8000f00 <flickerOff>
 8002618:	e058      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_AROUND_EDGE)) {
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	4a30      	ldr	r2, [pc, #192]	@ (80026e8 <executeCommandQueue+0x1a8>)
 8002628:	4413      	add	r3, r2
 800262a:	4935      	ldr	r1, [pc, #212]	@ (8002700 <executeCommandQueue+0x1c0>)
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd fdd1 	bl	80001d4 <strcmp>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d102      	bne.n	800263e <executeCommandQueue+0xfe>
                aroundEdgeDown();
 8002638:	f7fe fc82 	bl	8000f40 <aroundEdgeDown>
 800263c:	e046      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_RECTANGLE)) {
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	4a27      	ldr	r2, [pc, #156]	@ (80026e8 <executeCommandQueue+0x1a8>)
 800264c:	4413      	add	r3, r2
 800264e:	492d      	ldr	r1, [pc, #180]	@ (8002704 <executeCommandQueue+0x1c4>)
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd fdbf 	bl	80001d4 <strcmp>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <executeCommandQueue+0x122>
                diagonalRectangle();
 800265c:	f7fe fdd6 	bl	800120c <diagonalRectangle>
 8002660:	e034      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_PROPELLER)) {
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	4a1e      	ldr	r2, [pc, #120]	@ (80026e8 <executeCommandQueue+0x1a8>)
 8002670:	4413      	add	r3, r2
 8002672:	4925      	ldr	r1, [pc, #148]	@ (8002708 <executeCommandQueue+0x1c8>)
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd fdad 	bl	80001d4 <strcmp>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <executeCommandQueue+0x146>
                propeller();
 8002680:	f7fe ffc0 	bl	8001604 <propeller>
 8002684:	e022      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_SPIRAL)) {
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	4a15      	ldr	r2, [pc, #84]	@ (80026e8 <executeCommandQueue+0x1a8>)
 8002694:	4413      	add	r3, r2
 8002696:	491d      	ldr	r1, [pc, #116]	@ (800270c <executeCommandQueue+0x1cc>)
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd fd9b 	bl	80001d4 <strcmp>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <executeCommandQueue+0x16a>
                spiralInAndOut();
 80026a4:	f7ff f910 	bl	80018c8 <spiralInAndOut>
 80026a8:	e010      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_ALL_LEDS)) {
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	4a0c      	ldr	r2, [pc, #48]	@ (80026e8 <executeCommandQueue+0x1a8>)
 80026b8:	4413      	add	r3, r2
 80026ba:	4915      	ldr	r1, [pc, #84]	@ (8002710 <executeCommandQueue+0x1d0>)
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd fd89 	bl	80001d4 <strcmp>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <executeCommandQueue+0x18c>
                goThroughAllLedsOneAtATime();
 80026c8:	f7ff fc5e 	bl	8001f88 <goThroughAllLedsOneAtATime>
    for (int j = 0; j < commandQueueSize; ++j) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3301      	adds	r3, #1
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <executeCommandQueue+0x1d4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	f6ff af37 	blt.w	800254c <executeCommandQueue+0xc>
            }
        }
    }
}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	2000021c 	.word	0x2000021c
 80026ec:	080056dc 	.word	0x080056dc
 80026f0:	080056f0 	.word	0x080056f0
 80026f4:	08005708 	.word	0x08005708
 80026f8:	08005724 	.word	0x08005724
 80026fc:	0800573c 	.word	0x0800573c
 8002700:	08005750 	.word	0x08005750
 8002704:	08005764 	.word	0x08005764
 8002708:	08005778 	.word	0x08005778
 800270c:	0800578c 	.word	0x0800578c
 8002710:	0800579c 	.word	0x0800579c
 8002714:	200003b8 	.word	0x200003b8

08002718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800271c:	f000 fb56 	bl	8002dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002720:	f000 f862 	bl	80027e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002724:	f000 f942 	bl	80029ac <MX_GPIO_Init>
  MX_TIM3_Init();
 8002728:	f000 f8c8 	bl	80028bc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800272c:	f000 f914 	bl	8002958 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &recv_char, 1);
 8002730:	2201      	movs	r2, #1
 8002732:	4923      	ldr	r1, [pc, #140]	@ (80027c0 <main+0xa8>)
 8002734:	4823      	ldr	r0, [pc, #140]	@ (80027c4 <main+0xac>)
 8002736:	f001 ffe9 	bl	800470c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!strcmp(recv_str, on)){
 800273a:	4b23      	ldr	r3, [pc, #140]	@ (80027c8 <main+0xb0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4619      	mov	r1, r3
 8002740:	4822      	ldr	r0, [pc, #136]	@ (80027cc <main+0xb4>)
 8002742:	f7fd fd47 	bl	80001d4 <strcmp>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d105      	bne.n	8002758 <main+0x40>
	  		   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 800274c:	2201      	movs	r2, #1
 800274e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002752:	481f      	ldr	r0, [pc, #124]	@ (80027d0 <main+0xb8>)
 8002754:	f000 fef8 	bl	8003548 <HAL_GPIO_WritePin>
	  		}
	  if(!strcmp(recv_str, off)){
 8002758:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <main+0xbc>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	481b      	ldr	r0, [pc, #108]	@ (80027cc <main+0xb4>)
 8002760:	f7fd fd38 	bl	80001d4 <strcmp>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <main+0x5e>
	  		    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 800276a:	2200      	movs	r2, #0
 800276c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002770:	4817      	ldr	r0, [pc, #92]	@ (80027d0 <main+0xb8>)
 8002772:	f000 fee9 	bl	8003548 <HAL_GPIO_WritePin>
	  	    }
	  if(!strcmp(recv_str, all_leds_on)){
 8002776:	4b18      	ldr	r3, [pc, #96]	@ (80027d8 <main+0xc0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4619      	mov	r1, r3
 800277c:	4813      	ldr	r0, [pc, #76]	@ (80027cc <main+0xb4>)
 800277e:	f7fd fd29 	bl	80001d4 <strcmp>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <main+0x74>
	  	  		    enableAllPins();
 8002788:	f7fd ff1e 	bl	80005c8 <enableAllPins>
	  	  	    }
	  if(!strcmp(recv_str, all_leds_off)){
 800278c:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <main+0xc4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4619      	mov	r1, r3
 8002792:	480e      	ldr	r0, [pc, #56]	@ (80027cc <main+0xb4>)
 8002794:	f7fd fd1e 	bl	80001d4 <strcmp>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <main+0x8a>
	 	  	  		    disableAllPins();
 800279e:	f7fd fec1 	bl	8000524 <disableAllPins>
	 	  	  	    }




	  		if(interruptOccurred) {
 80027a2:	4b0f      	ldr	r3, [pc, #60]	@ (80027e0 <main+0xc8>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <main+0xa0>
	  			interruptOccurred = false;
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <main+0xc8>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
	  			processBluetoothCommands(command);
 80027b2:	480c      	ldr	r0, [pc, #48]	@ (80027e4 <main+0xcc>)
 80027b4:	f7ff fdd6 	bl	8002364 <processBluetoothCommands>
	  		}
	 executeCommandQueue();
 80027b8:	f7ff fec2 	bl	8002540 <executeCommandQueue>
	  if(!strcmp(recv_str, on)){
 80027bc:	e7bd      	b.n	800273a <main+0x22>
 80027be:	bf00      	nop
 80027c0:	200001c0 	.word	0x200001c0
 80027c4:	20000178 	.word	0x20000178
 80027c8:	200000f8 	.word	0x200000f8
 80027cc:	200001c4 	.word	0x200001c4
 80027d0:	40020800 	.word	0x40020800
 80027d4:	200000fc 	.word	0x200000fc
 80027d8:	20000100 	.word	0x20000100
 80027dc:	20000104 	.word	0x20000104
 80027e0:	20000218 	.word	0x20000218
 80027e4:	200001ec 	.word	0x200001ec

080027e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b094      	sub	sp, #80	@ 0x50
 80027ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ee:	f107 0320 	add.w	r3, r7, #32
 80027f2:	2230      	movs	r2, #48	@ 0x30
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 feac 	bl	8005554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	4b28      	ldr	r3, [pc, #160]	@ (80028b4 <SystemClock_Config+0xcc>)
 8002812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002814:	4a27      	ldr	r2, [pc, #156]	@ (80028b4 <SystemClock_Config+0xcc>)
 8002816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800281a:	6413      	str	r3, [r2, #64]	@ 0x40
 800281c:	4b25      	ldr	r3, [pc, #148]	@ (80028b4 <SystemClock_Config+0xcc>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002828:	2300      	movs	r3, #0
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	4b22      	ldr	r3, [pc, #136]	@ (80028b8 <SystemClock_Config+0xd0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002834:	4a20      	ldr	r2, [pc, #128]	@ (80028b8 <SystemClock_Config+0xd0>)
 8002836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b1e      	ldr	r3, [pc, #120]	@ (80028b8 <SystemClock_Config+0xd0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002844:	607b      	str	r3, [r7, #4]
 8002846:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002848:	2301      	movs	r3, #1
 800284a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800284c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002852:	2302      	movs	r3, #2
 8002854:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002856:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800285a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800285c:	2304      	movs	r3, #4
 800285e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002860:	2354      	movs	r3, #84	@ 0x54
 8002862:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002864:	2302      	movs	r3, #2
 8002866:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002868:	2307      	movs	r3, #7
 800286a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800286c:	f107 0320 	add.w	r3, r7, #32
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fe83 	bl	800357c <HAL_RCC_OscConfig>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800287c:	f000 f980 	bl	8002b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002880:	230f      	movs	r3, #15
 8002882:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002884:	2302      	movs	r3, #2
 8002886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800288c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002890:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	2102      	movs	r1, #2
 800289c:	4618      	mov	r0, r3
 800289e:	f001 f8e5 	bl	8003a6c <HAL_RCC_ClockConfig>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80028a8:	f000 f96a 	bl	8002b80 <Error_Handler>
  }
}
 80028ac:	bf00      	nop
 80028ae:	3750      	adds	r7, #80	@ 0x50
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40007000 	.word	0x40007000

080028bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028c2:	f107 0308 	add.w	r3, r7, #8
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d0:	463b      	mov	r3, r7
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <MX_TIM3_Init+0x94>)
 80028da:	4a1e      	ldr	r2, [pc, #120]	@ (8002954 <MX_TIM3_Init+0x98>)
 80028dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 80028de:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <MX_TIM3_Init+0x94>)
 80028e0:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 80028e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002950 <MX_TIM3_Init+0x94>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80028ec:	4b18      	ldr	r3, [pc, #96]	@ (8002950 <MX_TIM3_Init+0x94>)
 80028ee:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80028f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f4:	4b16      	ldr	r3, [pc, #88]	@ (8002950 <MX_TIM3_Init+0x94>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fa:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <MX_TIM3_Init+0x94>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002900:	4813      	ldr	r0, [pc, #76]	@ (8002950 <MX_TIM3_Init+0x94>)
 8002902:	f001 fad3 	bl	8003eac <HAL_TIM_Base_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800290c:	f000 f938 	bl	8002b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002916:	f107 0308 	add.w	r3, r7, #8
 800291a:	4619      	mov	r1, r3
 800291c:	480c      	ldr	r0, [pc, #48]	@ (8002950 <MX_TIM3_Init+0x94>)
 800291e:	f001 fc04 	bl	800412a <HAL_TIM_ConfigClockSource>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002928:	f000 f92a 	bl	8002b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292c:	2300      	movs	r3, #0
 800292e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002934:	463b      	mov	r3, r7
 8002936:	4619      	mov	r1, r3
 8002938:	4805      	ldr	r0, [pc, #20]	@ (8002950 <MX_TIM3_Init+0x94>)
 800293a:	f001 fe15 	bl	8004568 <HAL_TIMEx_MasterConfigSynchronization>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002944:	f000 f91c 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002948:	bf00      	nop
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000130 	.word	0x20000130
 8002954:	40000400 	.word	0x40000400

08002958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800295c:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <MX_USART1_UART_Init+0x4c>)
 800295e:	4a12      	ldr	r2, [pc, #72]	@ (80029a8 <MX_USART1_UART_Init+0x50>)
 8002960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002962:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <MX_USART1_UART_Init+0x4c>)
 8002964:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800296a:	4b0e      	ldr	r3, [pc, #56]	@ (80029a4 <MX_USART1_UART_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002970:	4b0c      	ldr	r3, [pc, #48]	@ (80029a4 <MX_USART1_UART_Init+0x4c>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002976:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <MX_USART1_UART_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800297c:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <MX_USART1_UART_Init+0x4c>)
 800297e:	220c      	movs	r2, #12
 8002980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002982:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <MX_USART1_UART_Init+0x4c>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002988:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <MX_USART1_UART_Init+0x4c>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800298e:	4805      	ldr	r0, [pc, #20]	@ (80029a4 <MX_USART1_UART_Init+0x4c>)
 8002990:	f001 fe6c 	bl	800466c <HAL_UART_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800299a:	f000 f8f1 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000178 	.word	0x20000178
 80029a8:	40011000 	.word	0x40011000

080029ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	@ 0x28
 80029b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b2:	f107 0314 	add.w	r3, r7, #20
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	4b43      	ldr	r3, [pc, #268]	@ (8002ad4 <MX_GPIO_Init+0x128>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	4a42      	ldr	r2, [pc, #264]	@ (8002ad4 <MX_GPIO_Init+0x128>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d2:	4b40      	ldr	r3, [pc, #256]	@ (8002ad4 <MX_GPIO_Init+0x128>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad4 <MX_GPIO_Init+0x128>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ad4 <MX_GPIO_Init+0x128>)
 80029e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ee:	4b39      	ldr	r3, [pc, #228]	@ (8002ad4 <MX_GPIO_Init+0x128>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	4b35      	ldr	r3, [pc, #212]	@ (8002ad4 <MX_GPIO_Init+0x128>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	4a34      	ldr	r2, [pc, #208]	@ (8002ad4 <MX_GPIO_Init+0x128>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0a:	4b32      	ldr	r3, [pc, #200]	@ (8002ad4 <MX_GPIO_Init+0x128>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad4 <MX_GPIO_Init+0x128>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8002ad4 <MX_GPIO_Init+0x128>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a26:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad4 <MX_GPIO_Init+0x128>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	607b      	str	r3, [r7, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN11_Pin|PIN12_Pin|PIN31_Pin|PIN13_Pin
 8002a32:	2200      	movs	r2, #0
 8002a34:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8002a38:	4827      	ldr	r0, [pc, #156]	@ (8002ad8 <MX_GPIO_Init+0x12c>)
 8002a3a:	f000 fd85 	bl	8003548 <HAL_GPIO_WritePin>
                          |PIN32_Pin|LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LAYER1_Pin|LAYER2_Pin|LAYER3_Pin|PIN42_Pin
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f240 11f3 	movw	r1, #499	@ 0x1f3
 8002a44:	4825      	ldr	r0, [pc, #148]	@ (8002adc <MX_GPIO_Init+0x130>)
 8002a46:	f000 fd7f 	bl	8003548 <HAL_GPIO_WritePin>
                          |PIN41_Pin|PIN34_Pin|PIN24_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LAYER4_Pin|PIN23_Pin|PIN14_Pin|PIN22_Pin
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f240 7179 	movw	r1, #1913	@ 0x779
 8002a50:	4823      	ldr	r0, [pc, #140]	@ (8002ae0 <MX_GPIO_Init+0x134>)
 8002a52:	f000 fd79 	bl	8003548 <HAL_GPIO_WritePin>
                          |PIN21_Pin|PIN33_Pin|PIN44_Pin|PIN43_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a5c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a66:	f107 0314 	add.w	r3, r7, #20
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	481a      	ldr	r0, [pc, #104]	@ (8002ad8 <MX_GPIO_Init+0x12c>)
 8002a6e:	f000 fbe7 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN11_Pin PIN12_Pin PIN31_Pin PIN13_Pin
                           PIN32_Pin LED_Pin */
  GPIO_InitStruct.Pin = PIN11_Pin|PIN12_Pin|PIN31_Pin|PIN13_Pin
 8002a72:	f240 13e3 	movw	r3, #483	@ 0x1e3
 8002a76:	617b      	str	r3, [r7, #20]
                          |PIN32_Pin|LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4813      	ldr	r0, [pc, #76]	@ (8002ad8 <MX_GPIO_Init+0x12c>)
 8002a8c:	f000 fbd8 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LAYER1_Pin LAYER2_Pin LAYER3_Pin PIN42_Pin
                           PIN41_Pin PIN34_Pin PIN24_Pin */
  GPIO_InitStruct.Pin = LAYER1_Pin|LAYER2_Pin|LAYER3_Pin|PIN42_Pin
 8002a90:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8002a94:	617b      	str	r3, [r7, #20]
                          |PIN41_Pin|PIN34_Pin|PIN24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a96:	2301      	movs	r3, #1
 8002a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	480c      	ldr	r0, [pc, #48]	@ (8002adc <MX_GPIO_Init+0x130>)
 8002aaa:	f000 fbc9 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LAYER4_Pin PIN23_Pin PIN14_Pin PIN22_Pin
                           PIN21_Pin PIN33_Pin PIN44_Pin PIN43_Pin */
  GPIO_InitStruct.Pin = LAYER4_Pin|PIN23_Pin|PIN14_Pin|PIN22_Pin
 8002aae:	f240 7379 	movw	r3, #1913	@ 0x779
 8002ab2:	617b      	str	r3, [r7, #20]
                          |PIN21_Pin|PIN33_Pin|PIN44_Pin|PIN43_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4806      	ldr	r0, [pc, #24]	@ (8002ae0 <MX_GPIO_Init+0x134>)
 8002ac8:	f000 fbba 	bl	8003240 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002acc:	bf00      	nop
 8002ace:	3728      	adds	r7, #40	@ 0x28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020000 	.word	0x40020000
 8002ae0:	40020400 	.word	0x40020400

08002ae4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002ae4:	b5b0      	push	{r4, r5, r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1 ){
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b64 <HAL_UART_RxCpltCallback+0x80>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d132      	bne.n	8002b5c <HAL_UART_RxCpltCallback+0x78>
        if(recv_char == '\r'){
 8002af6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b68 <HAL_UART_RxCpltCallback+0x84>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b0d      	cmp	r3, #13
 8002afc:	d11c      	bne.n	8002b38 <HAL_UART_RxCpltCallback+0x54>
        memset(command, 0, sizeof(command));
 8002afe:	2228      	movs	r2, #40	@ 0x28
 8002b00:	2100      	movs	r1, #0
 8002b02:	481a      	ldr	r0, [pc, #104]	@ (8002b6c <HAL_UART_RxCpltCallback+0x88>)
 8002b04:	f002 fd26 	bl	8005554 <memset>
        memcpy(command, recv_str, sizeof(recv_str));
 8002b08:	4a18      	ldr	r2, [pc, #96]	@ (8002b6c <HAL_UART_RxCpltCallback+0x88>)
 8002b0a:	4b19      	ldr	r3, [pc, #100]	@ (8002b70 <HAL_UART_RxCpltCallback+0x8c>)
 8002b0c:	4614      	mov	r4, r2
 8002b0e:	461d      	mov	r5, r3
 8002b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b18:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b1c:	e884 0003 	stmia.w	r4, {r0, r1}
		memset(recv_str, 0, sizeof(recv_str));
 8002b20:	2228      	movs	r2, #40	@ 0x28
 8002b22:	2100      	movs	r1, #0
 8002b24:	4812      	ldr	r0, [pc, #72]	@ (8002b70 <HAL_UART_RxCpltCallback+0x8c>)
 8002b26:	f002 fd15 	bl	8005554 <memset>
		i=0;
 8002b2a:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <HAL_UART_RxCpltCallback+0x90>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
		interruptOccurred = true;
 8002b30:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <HAL_UART_RxCpltCallback+0x94>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	e00c      	b.n	8002b52 <HAL_UART_RxCpltCallback+0x6e>
		}else{
		    if(recv_char != '\n'){
 8002b38:	4b0b      	ldr	r3, [pc, #44]	@ (8002b68 <HAL_UART_RxCpltCallback+0x84>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b0a      	cmp	r3, #10
 8002b3e:	d008      	beq.n	8002b52 <HAL_UART_RxCpltCallback+0x6e>
		    	recv_str[i++] = recv_char;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <HAL_UART_RxCpltCallback+0x90>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	490b      	ldr	r1, [pc, #44]	@ (8002b74 <HAL_UART_RxCpltCallback+0x90>)
 8002b48:	600a      	str	r2, [r1, #0]
 8002b4a:	4a07      	ldr	r2, [pc, #28]	@ (8002b68 <HAL_UART_RxCpltCallback+0x84>)
 8002b4c:	7811      	ldrb	r1, [r2, #0]
 8002b4e:	4a08      	ldr	r2, [pc, #32]	@ (8002b70 <HAL_UART_RxCpltCallback+0x8c>)
 8002b50:	54d1      	strb	r1, [r2, r3]
		}
	 }
	 HAL_UART_Receive_IT(&huart1, &recv_char, 1); //UART1 Interrupt call
 8002b52:	2201      	movs	r2, #1
 8002b54:	4904      	ldr	r1, [pc, #16]	@ (8002b68 <HAL_UART_RxCpltCallback+0x84>)
 8002b56:	4809      	ldr	r0, [pc, #36]	@ (8002b7c <HAL_UART_RxCpltCallback+0x98>)
 8002b58:	f001 fdd8 	bl	800470c <HAL_UART_Receive_IT>

    }
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bdb0      	pop	{r4, r5, r7, pc}
 8002b64:	40011000 	.word	0x40011000
 8002b68:	200001c0 	.word	0x200001c0
 8002b6c:	200001ec 	.word	0x200001ec
 8002b70:	200001c4 	.word	0x200001c4
 8002b74:	20000214 	.word	0x20000214
 8002b78:	20000218 	.word	0x20000218
 8002b7c:	20000178 	.word	0x20000178

08002b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b84:	b672      	cpsid	i
}
 8002b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <Error_Handler+0x8>

08002b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <HAL_MspInit+0x4c>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8002bd8 <HAL_MspInit+0x4c>)
 8002b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <HAL_MspInit+0x4c>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <HAL_MspInit+0x4c>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	4a08      	ldr	r2, [pc, #32]	@ (8002bd8 <HAL_MspInit+0x4c>)
 8002bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bbe:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <HAL_MspInit+0x4c>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bca:	2007      	movs	r0, #7
 8002bcc:	f000 fa64 	bl	8003098 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40023800 	.word	0x40023800

08002bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0e      	ldr	r2, [pc, #56]	@ (8002c24 <HAL_TIM_Base_MspInit+0x48>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d115      	bne.n	8002c1a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <HAL_TIM_Base_MspInit+0x4c>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8002c28 <HAL_TIM_Base_MspInit+0x4c>)
 8002bf8:	f043 0302 	orr.w	r3, r3, #2
 8002bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <HAL_TIM_Base_MspInit+0x4c>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	201d      	movs	r0, #29
 8002c10:	f000 fa4d 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c14:	201d      	movs	r0, #29
 8002c16:	f000 fa66 	bl	80030e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40023800 	.word	0x40023800

08002c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	@ 0x28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc0 <HAL_UART_MspInit+0x94>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d134      	bne.n	8002cb8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc4 <HAL_UART_MspInit+0x98>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c56:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc4 <HAL_UART_MspInit+0x98>)
 8002c58:	f043 0310 	orr.w	r3, r3, #16
 8002c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c5e:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <HAL_UART_MspInit+0x98>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	4b15      	ldr	r3, [pc, #84]	@ (8002cc4 <HAL_UART_MspInit+0x98>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	4a14      	ldr	r2, [pc, #80]	@ (8002cc4 <HAL_UART_MspInit+0x98>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c7a:	4b12      	ldr	r3, [pc, #72]	@ (8002cc4 <HAL_UART_MspInit+0x98>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c86:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c94:	2303      	movs	r3, #3
 8002c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c98:	2307      	movs	r3, #7
 8002c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9c:	f107 0314 	add.w	r3, r7, #20
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4809      	ldr	r0, [pc, #36]	@ (8002cc8 <HAL_UART_MspInit+0x9c>)
 8002ca4:	f000 facc 	bl	8003240 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2100      	movs	r1, #0
 8002cac:	2025      	movs	r0, #37	@ 0x25
 8002cae:	f000 f9fe 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cb2:	2025      	movs	r0, #37	@ 0x25
 8002cb4:	f000 fa17 	bl	80030e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cb8:	bf00      	nop
 8002cba:	3728      	adds	r7, #40	@ 0x28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40011000 	.word	0x40011000
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40020000 	.word	0x40020000

08002ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <NMI_Handler+0x4>

08002cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <HardFault_Handler+0x4>

08002cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <MemManage_Handler+0x4>

08002ce4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce8:	bf00      	nop
 8002cea:	e7fd      	b.n	8002ce8 <BusFault_Handler+0x4>

08002cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf0:	bf00      	nop
 8002cf2:	e7fd      	b.n	8002cf0 <UsageFault_Handler+0x4>

08002cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d22:	f000 f8a5 	bl	8002e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d30:	4802      	ldr	r0, [pc, #8]	@ (8002d3c <TIM3_IRQHandler+0x10>)
 8002d32:	f001 f90a 	bl	8003f4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000130 	.word	0x20000130

08002d40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d44:	4802      	ldr	r0, [pc, #8]	@ (8002d50 <USART1_IRQHandler+0x10>)
 8002d46:	f001 fd07 	bl	8004758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000178 	.word	0x20000178

08002d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d58:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <SystemInit+0x20>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5e:	4a05      	ldr	r2, [pc, #20]	@ (8002d74 <SystemInit+0x20>)
 8002d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002db0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d7c:	f7ff ffea 	bl	8002d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d80:	480c      	ldr	r0, [pc, #48]	@ (8002db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d82:	490d      	ldr	r1, [pc, #52]	@ (8002db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d84:	4a0d      	ldr	r2, [pc, #52]	@ (8002dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d88:	e002      	b.n	8002d90 <LoopCopyDataInit>

08002d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d8e:	3304      	adds	r3, #4

08002d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d94:	d3f9      	bcc.n	8002d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d96:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d98:	4c0a      	ldr	r4, [pc, #40]	@ (8002dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d9c:	e001      	b.n	8002da2 <LoopFillZerobss>

08002d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da0:	3204      	adds	r2, #4

08002da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da4:	d3fb      	bcc.n	8002d9e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002da6:	f002 fbf3 	bl	8005590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002daa:	f7ff fcb5 	bl	8002718 <main>
  bx  lr    
 8002dae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002db0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db8:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8002dbc:	080057d8 	.word	0x080057d8
  ldr r2, =_sbss
 8002dc0:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8002dc4:	200003c0 	.word	0x200003c0

08002dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dc8:	e7fe      	b.n	8002dc8 <ADC_IRQHandler>
	...

08002dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e0c <HAL_Init+0x40>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e0c <HAL_Init+0x40>)
 8002dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <HAL_Init+0x40>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <HAL_Init+0x40>)
 8002de2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de8:	4b08      	ldr	r3, [pc, #32]	@ (8002e0c <HAL_Init+0x40>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a07      	ldr	r2, [pc, #28]	@ (8002e0c <HAL_Init+0x40>)
 8002dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df4:	2003      	movs	r0, #3
 8002df6:	f000 f94f 	bl	8003098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f000 f808 	bl	8002e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e00:	f7ff fec4 	bl	8002b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023c00 	.word	0x40023c00

08002e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e18:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <HAL_InitTick+0x54>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_InitTick+0x58>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4619      	mov	r1, r3
 8002e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f967 	bl	8003102 <HAL_SYSTICK_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e00e      	b.n	8002e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b0f      	cmp	r3, #15
 8002e42:	d80a      	bhi.n	8002e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e44:	2200      	movs	r2, #0
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	f000 f92f 	bl	80030ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e50:	4a06      	ldr	r2, [pc, #24]	@ (8002e6c <HAL_InitTick+0x5c>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000108 	.word	0x20000108
 8002e68:	20000110 	.word	0x20000110
 8002e6c:	2000010c 	.word	0x2000010c

08002e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <HAL_IncTick+0x20>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_IncTick+0x24>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	4a04      	ldr	r2, [pc, #16]	@ (8002e94 <HAL_IncTick+0x24>)
 8002e82:	6013      	str	r3, [r2, #0]
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000110 	.word	0x20000110
 8002e94:	200003bc 	.word	0x200003bc

08002e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	@ (8002eac <HAL_GetTick+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	200003bc 	.word	0x200003bc

08002eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb8:	f7ff ffee 	bl	8002e98 <HAL_GetTick>
 8002ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d005      	beq.n	8002ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef4 <HAL_Delay+0x44>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ed6:	bf00      	nop
 8002ed8:	f7ff ffde 	bl	8002e98 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d8f7      	bhi.n	8002ed8 <HAL_Delay+0x28>
  {
  }
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000110 	.word	0x20000110

08002ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f08:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <__NVIC_SetPriorityGrouping+0x44>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f14:	4013      	ands	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2a:	4a04      	ldr	r2, [pc, #16]	@ (8002f3c <__NVIC_SetPriorityGrouping+0x44>)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	60d3      	str	r3, [r2, #12]
}
 8002f30:	bf00      	nop
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f44:	4b04      	ldr	r3, [pc, #16]	@ (8002f58 <__NVIC_GetPriorityGrouping+0x18>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	f003 0307 	and.w	r3, r3, #7
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	db0b      	blt.n	8002f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	f003 021f 	and.w	r2, r3, #31
 8002f74:	4907      	ldr	r1, [pc, #28]	@ (8002f94 <__NVIC_EnableIRQ+0x38>)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000e100 	.word	0xe000e100

08002f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db0a      	blt.n	8002fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	490c      	ldr	r1, [pc, #48]	@ (8002fe4 <__NVIC_SetPriority+0x4c>)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	0112      	lsls	r2, r2, #4
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	440b      	add	r3, r1
 8002fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc0:	e00a      	b.n	8002fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4908      	ldr	r1, [pc, #32]	@ (8002fe8 <__NVIC_SetPriority+0x50>)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	3b04      	subs	r3, #4
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	761a      	strb	r2, [r3, #24]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000e100 	.word	0xe000e100
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	@ 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f1c3 0307 	rsb	r3, r3, #7
 8003006:	2b04      	cmp	r3, #4
 8003008:	bf28      	it	cs
 800300a:	2304      	movcs	r3, #4
 800300c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3304      	adds	r3, #4
 8003012:	2b06      	cmp	r3, #6
 8003014:	d902      	bls.n	800301c <NVIC_EncodePriority+0x30>
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3b03      	subs	r3, #3
 800301a:	e000      	b.n	800301e <NVIC_EncodePriority+0x32>
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003020:	f04f 32ff 	mov.w	r2, #4294967295
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	401a      	ands	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003034:	f04f 31ff 	mov.w	r1, #4294967295
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	43d9      	mvns	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003044:	4313      	orrs	r3, r2
         );
}
 8003046:	4618      	mov	r0, r3
 8003048:	3724      	adds	r7, #36	@ 0x24
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3b01      	subs	r3, #1
 8003060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003064:	d301      	bcc.n	800306a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003066:	2301      	movs	r3, #1
 8003068:	e00f      	b.n	800308a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800306a:	4a0a      	ldr	r2, [pc, #40]	@ (8003094 <SysTick_Config+0x40>)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3b01      	subs	r3, #1
 8003070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003072:	210f      	movs	r1, #15
 8003074:	f04f 30ff 	mov.w	r0, #4294967295
 8003078:	f7ff ff8e 	bl	8002f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800307c:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <SysTick_Config+0x40>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003082:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <SysTick_Config+0x40>)
 8003084:	2207      	movs	r2, #7
 8003086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	e000e010 	.word	0xe000e010

08003098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ff29 	bl	8002ef8 <__NVIC_SetPriorityGrouping>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b086      	sub	sp, #24
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030c0:	f7ff ff3e 	bl	8002f40 <__NVIC_GetPriorityGrouping>
 80030c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	6978      	ldr	r0, [r7, #20]
 80030cc:	f7ff ff8e 	bl	8002fec <NVIC_EncodePriority>
 80030d0:	4602      	mov	r2, r0
 80030d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff5d 	bl	8002f98 <__NVIC_SetPriority>
}
 80030de:	bf00      	nop
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	4603      	mov	r3, r0
 80030ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff31 	bl	8002f5c <__NVIC_EnableIRQ>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff ffa2 	bl	8003054 <SysTick_Config>
 8003110:	4603      	mov	r3, r0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003128:	f7ff feb6 	bl	8002e98 <HAL_GetTick>
 800312c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d008      	beq.n	800314c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2280      	movs	r2, #128	@ 0x80
 800313e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e052      	b.n	80031f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0216 	bic.w	r2, r2, #22
 800315a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800316a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <HAL_DMA_Abort+0x62>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003178:	2b00      	cmp	r3, #0
 800317a:	d007      	beq.n	800318c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0208 	bic.w	r2, r2, #8
 800318a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800319c:	e013      	b.n	80031c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800319e:	f7ff fe7b 	bl	8002e98 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d90c      	bls.n	80031c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2203      	movs	r2, #3
 80031b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e015      	b.n	80031f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e4      	bne.n	800319e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d8:	223f      	movs	r2, #63	@ 0x3f
 80031da:	409a      	lsls	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d004      	beq.n	8003218 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2280      	movs	r2, #128	@ 0x80
 8003212:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e00c      	b.n	8003232 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2205      	movs	r2, #5
 800321c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0201 	bic.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	@ 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	e159      	b.n	8003510 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800325c:	2201      	movs	r2, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	429a      	cmp	r2, r3
 8003276:	f040 8148 	bne.w	800350a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b01      	cmp	r3, #1
 8003284:	d005      	beq.n	8003292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328e:	2b02      	cmp	r3, #2
 8003290:	d130      	bne.n	80032f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2203      	movs	r2, #3
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c8:	2201      	movs	r2, #1
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 0201 	and.w	r2, r3, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d017      	beq.n	8003330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2203      	movs	r2, #3
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d123      	bne.n	8003384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	08da      	lsrs	r2, r3, #3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3208      	adds	r2, #8
 8003344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	220f      	movs	r2, #15
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	08da      	lsrs	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3208      	adds	r2, #8
 800337e:	69b9      	ldr	r1, [r7, #24]
 8003380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0203 	and.w	r2, r3, #3
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80a2 	beq.w	800350a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	4b57      	ldr	r3, [pc, #348]	@ (8003528 <HAL_GPIO_Init+0x2e8>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	4a56      	ldr	r2, [pc, #344]	@ (8003528 <HAL_GPIO_Init+0x2e8>)
 80033d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033d6:	4b54      	ldr	r3, [pc, #336]	@ (8003528 <HAL_GPIO_Init+0x2e8>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033e2:	4a52      	ldr	r2, [pc, #328]	@ (800352c <HAL_GPIO_Init+0x2ec>)
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	3302      	adds	r3, #2
 80033ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	220f      	movs	r2, #15
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a49      	ldr	r2, [pc, #292]	@ (8003530 <HAL_GPIO_Init+0x2f0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d019      	beq.n	8003442 <HAL_GPIO_Init+0x202>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a48      	ldr	r2, [pc, #288]	@ (8003534 <HAL_GPIO_Init+0x2f4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <HAL_GPIO_Init+0x1fe>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a47      	ldr	r2, [pc, #284]	@ (8003538 <HAL_GPIO_Init+0x2f8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00d      	beq.n	800343a <HAL_GPIO_Init+0x1fa>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a46      	ldr	r2, [pc, #280]	@ (800353c <HAL_GPIO_Init+0x2fc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <HAL_GPIO_Init+0x1f6>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a45      	ldr	r2, [pc, #276]	@ (8003540 <HAL_GPIO_Init+0x300>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_GPIO_Init+0x1f2>
 800342e:	2304      	movs	r3, #4
 8003430:	e008      	b.n	8003444 <HAL_GPIO_Init+0x204>
 8003432:	2307      	movs	r3, #7
 8003434:	e006      	b.n	8003444 <HAL_GPIO_Init+0x204>
 8003436:	2303      	movs	r3, #3
 8003438:	e004      	b.n	8003444 <HAL_GPIO_Init+0x204>
 800343a:	2302      	movs	r3, #2
 800343c:	e002      	b.n	8003444 <HAL_GPIO_Init+0x204>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_GPIO_Init+0x204>
 8003442:	2300      	movs	r3, #0
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	f002 0203 	and.w	r2, r2, #3
 800344a:	0092      	lsls	r2, r2, #2
 800344c:	4093      	lsls	r3, r2
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003454:	4935      	ldr	r1, [pc, #212]	@ (800352c <HAL_GPIO_Init+0x2ec>)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	3302      	adds	r3, #2
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003462:	4b38      	ldr	r3, [pc, #224]	@ (8003544 <HAL_GPIO_Init+0x304>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003486:	4a2f      	ldr	r2, [pc, #188]	@ (8003544 <HAL_GPIO_Init+0x304>)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800348c:	4b2d      	ldr	r3, [pc, #180]	@ (8003544 <HAL_GPIO_Init+0x304>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034b0:	4a24      	ldr	r2, [pc, #144]	@ (8003544 <HAL_GPIO_Init+0x304>)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034b6:	4b23      	ldr	r3, [pc, #140]	@ (8003544 <HAL_GPIO_Init+0x304>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034da:	4a1a      	ldr	r2, [pc, #104]	@ (8003544 <HAL_GPIO_Init+0x304>)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034e0:	4b18      	ldr	r3, [pc, #96]	@ (8003544 <HAL_GPIO_Init+0x304>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003504:	4a0f      	ldr	r2, [pc, #60]	@ (8003544 <HAL_GPIO_Init+0x304>)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3301      	adds	r3, #1
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2b0f      	cmp	r3, #15
 8003514:	f67f aea2 	bls.w	800325c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3724      	adds	r7, #36	@ 0x24
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	40013800 	.word	0x40013800
 8003530:	40020000 	.word	0x40020000
 8003534:	40020400 	.word	0x40020400
 8003538:	40020800 	.word	0x40020800
 800353c:	40020c00 	.word	0x40020c00
 8003540:	40021000 	.word	0x40021000
 8003544:	40013c00 	.word	0x40013c00

08003548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
 8003554:	4613      	mov	r3, r2
 8003556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003558:	787b      	ldrb	r3, [r7, #1]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800355e:	887a      	ldrh	r2, [r7, #2]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003564:	e003      	b.n	800356e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003566:	887b      	ldrh	r3, [r7, #2]
 8003568:	041a      	lsls	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	619a      	str	r2, [r3, #24]
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e267      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d075      	beq.n	8003686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800359a:	4b88      	ldr	r3, [pc, #544]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d00c      	beq.n	80035c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035a6:	4b85      	ldr	r3, [pc, #532]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d112      	bne.n	80035d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b2:	4b82      	ldr	r3, [pc, #520]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035be:	d10b      	bne.n	80035d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	4b7e      	ldr	r3, [pc, #504]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d05b      	beq.n	8003684 <HAL_RCC_OscConfig+0x108>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d157      	bne.n	8003684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e242      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e0:	d106      	bne.n	80035f0 <HAL_RCC_OscConfig+0x74>
 80035e2:	4b76      	ldr	r3, [pc, #472]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a75      	ldr	r2, [pc, #468]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e01d      	b.n	800362c <HAL_RCC_OscConfig+0xb0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x98>
 80035fa:	4b70      	ldr	r3, [pc, #448]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6f      	ldr	r2, [pc, #444]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b6d      	ldr	r3, [pc, #436]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6c      	ldr	r2, [pc, #432]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0xb0>
 8003614:	4b69      	ldr	r3, [pc, #420]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a68      	ldr	r2, [pc, #416]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b66      	ldr	r3, [pc, #408]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a65      	ldr	r2, [pc, #404]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800362a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7ff fc30 	bl	8002e98 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800363c:	f7ff fc2c 	bl	8002e98 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e207      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	4b5b      	ldr	r3, [pc, #364]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0xc0>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7ff fc1c 	bl	8002e98 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003664:	f7ff fc18 	bl	8002e98 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	@ 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e1f3      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	4b51      	ldr	r3, [pc, #324]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0xe8>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d063      	beq.n	800375a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003692:	4b4a      	ldr	r3, [pc, #296]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369e:	4b47      	ldr	r3, [pc, #284]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d11c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036aa:	4b44      	ldr	r3, [pc, #272]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d116      	bne.n	80036e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	4b41      	ldr	r3, [pc, #260]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x152>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e1c7      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ce:	4b3b      	ldr	r3, [pc, #236]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4937      	ldr	r1, [pc, #220]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	e03a      	b.n	800375a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ec:	4b34      	ldr	r3, [pc, #208]	@ (80037c0 <HAL_RCC_OscConfig+0x244>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7ff fbd1 	bl	8002e98 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fa:	f7ff fbcd 	bl	8002e98 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e1a8      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370c:	4b2b      	ldr	r3, [pc, #172]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b28      	ldr	r3, [pc, #160]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4925      	ldr	r1, [pc, #148]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b24      	ldr	r3, [pc, #144]	@ (80037c0 <HAL_RCC_OscConfig+0x244>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7ff fbb0 	bl	8002e98 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800373c:	f7ff fbac 	bl	8002e98 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e187      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	4b1b      	ldr	r3, [pc, #108]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d036      	beq.n	80037d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d016      	beq.n	800379c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376e:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <HAL_RCC_OscConfig+0x248>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7ff fb90 	bl	8002e98 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800377c:	f7ff fb8c 	bl	8002e98 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e167      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378e:	4b0b      	ldr	r3, [pc, #44]	@ (80037bc <HAL_RCC_OscConfig+0x240>)
 8003790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x200>
 800379a:	e01b      	b.n	80037d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379c:	4b09      	ldr	r3, [pc, #36]	@ (80037c4 <HAL_RCC_OscConfig+0x248>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a2:	f7ff fb79 	bl	8002e98 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	e00e      	b.n	80037c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037aa:	f7ff fb75 	bl	8002e98 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d907      	bls.n	80037c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e150      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
 80037bc:	40023800 	.word	0x40023800
 80037c0:	42470000 	.word	0x42470000
 80037c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c8:	4b88      	ldr	r3, [pc, #544]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80037ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ea      	bne.n	80037aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8097 	beq.w	8003910 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e6:	4b81      	ldr	r3, [pc, #516]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	4b7d      	ldr	r3, [pc, #500]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	4a7c      	ldr	r2, [pc, #496]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80037fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003800:	6413      	str	r3, [r2, #64]	@ 0x40
 8003802:	4b7a      	ldr	r3, [pc, #488]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003812:	4b77      	ldr	r3, [pc, #476]	@ (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d118      	bne.n	8003850 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381e:	4b74      	ldr	r3, [pc, #464]	@ (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a73      	ldr	r2, [pc, #460]	@ (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382a:	f7ff fb35 	bl	8002e98 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7ff fb31 	bl	8002e98 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e10c      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003844:	4b6a      	ldr	r3, [pc, #424]	@ (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d106      	bne.n	8003866 <HAL_RCC_OscConfig+0x2ea>
 8003858:	4b64      	ldr	r3, [pc, #400]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385c:	4a63      	ldr	r2, [pc, #396]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6713      	str	r3, [r2, #112]	@ 0x70
 8003864:	e01c      	b.n	80038a0 <HAL_RCC_OscConfig+0x324>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b05      	cmp	r3, #5
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0x30c>
 800386e:	4b5f      	ldr	r3, [pc, #380]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003872:	4a5e      	ldr	r2, [pc, #376]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6713      	str	r3, [r2, #112]	@ 0x70
 800387a:	4b5c      	ldr	r3, [pc, #368]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387e:	4a5b      	ldr	r2, [pc, #364]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6713      	str	r3, [r2, #112]	@ 0x70
 8003886:	e00b      	b.n	80038a0 <HAL_RCC_OscConfig+0x324>
 8003888:	4b58      	ldr	r3, [pc, #352]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388c:	4a57      	ldr	r2, [pc, #348]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	6713      	str	r3, [r2, #112]	@ 0x70
 8003894:	4b55      	ldr	r3, [pc, #340]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003898:	4a54      	ldr	r2, [pc, #336]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800389a:	f023 0304 	bic.w	r3, r3, #4
 800389e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d015      	beq.n	80038d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7ff faf6 	bl	8002e98 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b0:	f7ff faf2 	bl	8002e98 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e0cb      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c6:	4b49      	ldr	r3, [pc, #292]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0ee      	beq.n	80038b0 <HAL_RCC_OscConfig+0x334>
 80038d2:	e014      	b.n	80038fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d4:	f7ff fae0 	bl	8002e98 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7ff fadc 	bl	8002e98 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e0b5      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f2:	4b3e      	ldr	r3, [pc, #248]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1ee      	bne.n	80038dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d105      	bne.n	8003910 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003904:	4b39      	ldr	r3, [pc, #228]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	4a38      	ldr	r2, [pc, #224]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800390a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800390e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80a1 	beq.w	8003a5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800391a:	4b34      	ldr	r3, [pc, #208]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b08      	cmp	r3, #8
 8003924:	d05c      	beq.n	80039e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d141      	bne.n	80039b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392e:	4b31      	ldr	r3, [pc, #196]	@ (80039f4 <HAL_RCC_OscConfig+0x478>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7ff fab0 	bl	8002e98 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393c:	f7ff faac 	bl	8002e98 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e087      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	4b27      	ldr	r3, [pc, #156]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	3b01      	subs	r3, #1
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	491b      	ldr	r1, [pc, #108]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003984:	4b1b      	ldr	r3, [pc, #108]	@ (80039f4 <HAL_RCC_OscConfig+0x478>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7ff fa85 	bl	8002e98 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003992:	f7ff fa81 	bl	8002e98 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e05c      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a4:	4b11      	ldr	r3, [pc, #68]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x416>
 80039b0:	e054      	b.n	8003a5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	4b10      	ldr	r3, [pc, #64]	@ (80039f4 <HAL_RCC_OscConfig+0x478>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7ff fa6e 	bl	8002e98 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c0:	f7ff fa6a 	bl	8002e98 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e045      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d2:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <HAL_RCC_OscConfig+0x470>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x444>
 80039de:	e03d      	b.n	8003a5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e038      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40007000 	.word	0x40007000
 80039f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a68 <HAL_RCC_OscConfig+0x4ec>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d028      	beq.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d121      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d11a      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a28:	4013      	ands	r3, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d111      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	3b01      	subs	r3, #1
 8003a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800

08003a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0cc      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a80:	4b68      	ldr	r3, [pc, #416]	@ (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d90c      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8e:	4b65      	ldr	r3, [pc, #404]	@ (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b63      	ldr	r3, [pc, #396]	@ (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0b8      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac0:	4b59      	ldr	r3, [pc, #356]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a58      	ldr	r2, [pc, #352]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003aca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad8:	4b53      	ldr	r3, [pc, #332]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4a52      	ldr	r2, [pc, #328]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b50      	ldr	r3, [pc, #320]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	494d      	ldr	r1, [pc, #308]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d044      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	4b47      	ldr	r3, [pc, #284]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d119      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e07f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d107      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e06f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e067      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4a:	4b37      	ldr	r3, [pc, #220]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 0203 	bic.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4934      	ldr	r1, [pc, #208]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b5c:	f7ff f99c 	bl	8002e98 <HAL_GetTick>
 8003b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b64:	f7ff f998 	bl	8002e98 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e04f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 020c 	and.w	r2, r3, #12
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d1eb      	bne.n	8003b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8c:	4b25      	ldr	r3, [pc, #148]	@ (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d20c      	bcs.n	8003bb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9a:	4b22      	ldr	r3, [pc, #136]	@ (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b20      	ldr	r3, [pc, #128]	@ (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e032      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc0:	4b19      	ldr	r3, [pc, #100]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4916      	ldr	r1, [pc, #88]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bde:	4b12      	ldr	r3, [pc, #72]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	490e      	ldr	r1, [pc, #56]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bf2:	f000 f821 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	490a      	ldr	r1, [pc, #40]	@ (8003c2c <HAL_RCC_ClockConfig+0x1c0>)
 8003c04:	5ccb      	ldrb	r3, [r1, r3]
 8003c06:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0a:	4a09      	ldr	r2, [pc, #36]	@ (8003c30 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c0e:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff f8fc 	bl	8002e10 <HAL_InitTick>

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40023c00 	.word	0x40023c00
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	080057b0 	.word	0x080057b0
 8003c30:	20000108 	.word	0x20000108
 8003c34:	2000010c 	.word	0x2000010c

08003c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c3c:	b094      	sub	sp, #80	@ 0x50
 8003c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c44:	2300      	movs	r3, #0
 8003c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c48:	2300      	movs	r3, #0
 8003c4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c50:	4b79      	ldr	r3, [pc, #484]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d00d      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x40>
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	f200 80e1 	bhi.w	8003e24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x34>
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d003      	beq.n	8003c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c6a:	e0db      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c6c:	4b73      	ldr	r3, [pc, #460]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003c70:	e0db      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c72:	4b73      	ldr	r3, [pc, #460]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c76:	e0d8      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c78:	4b6f      	ldr	r3, [pc, #444]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c80:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c82:	4b6d      	ldr	r3, [pc, #436]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d063      	beq.n	8003d56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	099b      	lsrs	r3, r3, #6
 8003c94:	2200      	movs	r2, #0
 8003c96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ca6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003caa:	4622      	mov	r2, r4
 8003cac:	462b      	mov	r3, r5
 8003cae:	f04f 0000 	mov.w	r0, #0
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	0159      	lsls	r1, r3, #5
 8003cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cbc:	0150      	lsls	r0, r2, #5
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	1a51      	subs	r1, r2, r1
 8003cc6:	6139      	str	r1, [r7, #16]
 8003cc8:	4629      	mov	r1, r5
 8003cca:	eb63 0301 	sbc.w	r3, r3, r1
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cdc:	4659      	mov	r1, fp
 8003cde:	018b      	lsls	r3, r1, #6
 8003ce0:	4651      	mov	r1, sl
 8003ce2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ce6:	4651      	mov	r1, sl
 8003ce8:	018a      	lsls	r2, r1, #6
 8003cea:	4651      	mov	r1, sl
 8003cec:	ebb2 0801 	subs.w	r8, r2, r1
 8003cf0:	4659      	mov	r1, fp
 8003cf2:	eb63 0901 	sbc.w	r9, r3, r1
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d0a:	4690      	mov	r8, r2
 8003d0c:	4699      	mov	r9, r3
 8003d0e:	4623      	mov	r3, r4
 8003d10:	eb18 0303 	adds.w	r3, r8, r3
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	462b      	mov	r3, r5
 8003d18:	eb49 0303 	adc.w	r3, r9, r3
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d2a:	4629      	mov	r1, r5
 8003d2c:	024b      	lsls	r3, r1, #9
 8003d2e:	4621      	mov	r1, r4
 8003d30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d34:	4621      	mov	r1, r4
 8003d36:	024a      	lsls	r2, r1, #9
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d3e:	2200      	movs	r2, #0
 8003d40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d48:	f7fc fa56 	bl	80001f8 <__aeabi_uldivmod>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4613      	mov	r3, r2
 8003d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d54:	e058      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d56:	4b38      	ldr	r3, [pc, #224]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	099b      	lsrs	r3, r3, #6
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	4611      	mov	r1, r2
 8003d62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d66:	623b      	str	r3, [r7, #32]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d70:	4642      	mov	r2, r8
 8003d72:	464b      	mov	r3, r9
 8003d74:	f04f 0000 	mov.w	r0, #0
 8003d78:	f04f 0100 	mov.w	r1, #0
 8003d7c:	0159      	lsls	r1, r3, #5
 8003d7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d82:	0150      	lsls	r0, r2, #5
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4641      	mov	r1, r8
 8003d8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d8e:	4649      	mov	r1, r9
 8003d90:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003da0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003da4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003da8:	ebb2 040a 	subs.w	r4, r2, sl
 8003dac:	eb63 050b 	sbc.w	r5, r3, fp
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	00eb      	lsls	r3, r5, #3
 8003dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dbe:	00e2      	lsls	r2, r4, #3
 8003dc0:	4614      	mov	r4, r2
 8003dc2:	461d      	mov	r5, r3
 8003dc4:	4643      	mov	r3, r8
 8003dc6:	18e3      	adds	r3, r4, r3
 8003dc8:	603b      	str	r3, [r7, #0]
 8003dca:	464b      	mov	r3, r9
 8003dcc:	eb45 0303 	adc.w	r3, r5, r3
 8003dd0:	607b      	str	r3, [r7, #4]
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dde:	4629      	mov	r1, r5
 8003de0:	028b      	lsls	r3, r1, #10
 8003de2:	4621      	mov	r1, r4
 8003de4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003de8:	4621      	mov	r1, r4
 8003dea:	028a      	lsls	r2, r1, #10
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003df2:	2200      	movs	r2, #0
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	61fa      	str	r2, [r7, #28]
 8003df8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dfc:	f7fc f9fc 	bl	80001f8 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4613      	mov	r3, r2
 8003e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e08:	4b0b      	ldr	r3, [pc, #44]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	0c1b      	lsrs	r3, r3, #16
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	3301      	adds	r3, #1
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003e18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e22:	e002      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e24:	4b05      	ldr	r3, [pc, #20]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3750      	adds	r7, #80	@ 0x50
 8003e30:	46bd      	mov	sp, r7
 8003e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	00f42400 	.word	0x00f42400
 8003e40:	007a1200 	.word	0x007a1200

08003e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e48:	4b03      	ldr	r3, [pc, #12]	@ (8003e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000108 	.word	0x20000108

08003e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e60:	f7ff fff0 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	4b05      	ldr	r3, [pc, #20]	@ (8003e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	0a9b      	lsrs	r3, r3, #10
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	4903      	ldr	r1, [pc, #12]	@ (8003e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	080057c0 	.word	0x080057c0

08003e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e88:	f7ff ffdc 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	0b5b      	lsrs	r3, r3, #13
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	4903      	ldr	r1, [pc, #12]	@ (8003ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e9a:	5ccb      	ldrb	r3, [r1, r3]
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	080057c0 	.word	0x080057c0

08003eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e041      	b.n	8003f42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fe fe82 	bl	8002bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f000 fa16 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d020      	beq.n	8003fae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01b      	beq.n	8003fae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f06f 0202 	mvn.w	r2, #2
 8003f7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f9a3 	bl	80042e0 <HAL_TIM_IC_CaptureCallback>
 8003f9a:	e005      	b.n	8003fa8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f995 	bl	80042cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f9a6 	bl	80042f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d020      	beq.n	8003ffa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01b      	beq.n	8003ffa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f06f 0204 	mvn.w	r2, #4
 8003fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f97d 	bl	80042e0 <HAL_TIM_IC_CaptureCallback>
 8003fe6:	e005      	b.n	8003ff4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f96f 	bl	80042cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f980 	bl	80042f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d020      	beq.n	8004046 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01b      	beq.n	8004046 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f06f 0208 	mvn.w	r2, #8
 8004016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2204      	movs	r2, #4
 800401c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f957 	bl	80042e0 <HAL_TIM_IC_CaptureCallback>
 8004032:	e005      	b.n	8004040 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f949 	bl	80042cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f95a 	bl	80042f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b00      	cmp	r3, #0
 800404e:	d020      	beq.n	8004092 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01b      	beq.n	8004092 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f06f 0210 	mvn.w	r2, #16
 8004062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2208      	movs	r2, #8
 8004068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f931 	bl	80042e0 <HAL_TIM_IC_CaptureCallback>
 800407e:	e005      	b.n	800408c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f923 	bl	80042cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f934 	bl	80042f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00c      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f06f 0201 	mvn.w	r2, #1
 80040ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f901 	bl	80042b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00c      	beq.n	80040da <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fabf 	bl	8004658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00c      	beq.n	80040fe <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f905 	bl	8004308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00c      	beq.n	8004122 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f06f 0220 	mvn.w	r2, #32
 800411a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fa91 	bl	8004644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_TIM_ConfigClockSource+0x1c>
 8004142:	2302      	movs	r3, #2
 8004144:	e0b4      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x186>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004164:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800416c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800417e:	d03e      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0xd4>
 8004180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004184:	f200 8087 	bhi.w	8004296 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800418c:	f000 8086 	beq.w	800429c <HAL_TIM_ConfigClockSource+0x172>
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004194:	d87f      	bhi.n	8004296 <HAL_TIM_ConfigClockSource+0x16c>
 8004196:	2b70      	cmp	r3, #112	@ 0x70
 8004198:	d01a      	beq.n	80041d0 <HAL_TIM_ConfigClockSource+0xa6>
 800419a:	2b70      	cmp	r3, #112	@ 0x70
 800419c:	d87b      	bhi.n	8004296 <HAL_TIM_ConfigClockSource+0x16c>
 800419e:	2b60      	cmp	r3, #96	@ 0x60
 80041a0:	d050      	beq.n	8004244 <HAL_TIM_ConfigClockSource+0x11a>
 80041a2:	2b60      	cmp	r3, #96	@ 0x60
 80041a4:	d877      	bhi.n	8004296 <HAL_TIM_ConfigClockSource+0x16c>
 80041a6:	2b50      	cmp	r3, #80	@ 0x50
 80041a8:	d03c      	beq.n	8004224 <HAL_TIM_ConfigClockSource+0xfa>
 80041aa:	2b50      	cmp	r3, #80	@ 0x50
 80041ac:	d873      	bhi.n	8004296 <HAL_TIM_ConfigClockSource+0x16c>
 80041ae:	2b40      	cmp	r3, #64	@ 0x40
 80041b0:	d058      	beq.n	8004264 <HAL_TIM_ConfigClockSource+0x13a>
 80041b2:	2b40      	cmp	r3, #64	@ 0x40
 80041b4:	d86f      	bhi.n	8004296 <HAL_TIM_ConfigClockSource+0x16c>
 80041b6:	2b30      	cmp	r3, #48	@ 0x30
 80041b8:	d064      	beq.n	8004284 <HAL_TIM_ConfigClockSource+0x15a>
 80041ba:	2b30      	cmp	r3, #48	@ 0x30
 80041bc:	d86b      	bhi.n	8004296 <HAL_TIM_ConfigClockSource+0x16c>
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d060      	beq.n	8004284 <HAL_TIM_ConfigClockSource+0x15a>
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	d867      	bhi.n	8004296 <HAL_TIM_ConfigClockSource+0x16c>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d05c      	beq.n	8004284 <HAL_TIM_ConfigClockSource+0x15a>
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d05a      	beq.n	8004284 <HAL_TIM_ConfigClockSource+0x15a>
 80041ce:	e062      	b.n	8004296 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041e0:	f000 f9a2 	bl	8004528 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	609a      	str	r2, [r3, #8]
      break;
 80041fc:	e04f      	b.n	800429e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800420e:	f000 f98b 	bl	8004528 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004220:	609a      	str	r2, [r3, #8]
      break;
 8004222:	e03c      	b.n	800429e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004230:	461a      	mov	r2, r3
 8004232:	f000 f8ff 	bl	8004434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2150      	movs	r1, #80	@ 0x50
 800423c:	4618      	mov	r0, r3
 800423e:	f000 f958 	bl	80044f2 <TIM_ITRx_SetConfig>
      break;
 8004242:	e02c      	b.n	800429e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004250:	461a      	mov	r2, r3
 8004252:	f000 f91e 	bl	8004492 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2160      	movs	r1, #96	@ 0x60
 800425c:	4618      	mov	r0, r3
 800425e:	f000 f948 	bl	80044f2 <TIM_ITRx_SetConfig>
      break;
 8004262:	e01c      	b.n	800429e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004270:	461a      	mov	r2, r3
 8004272:	f000 f8df 	bl	8004434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2140      	movs	r1, #64	@ 0x40
 800427c:	4618      	mov	r0, r3
 800427e:	f000 f938 	bl	80044f2 <TIM_ITRx_SetConfig>
      break;
 8004282:	e00c      	b.n	800429e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f000 f92f 	bl	80044f2 <TIM_ITRx_SetConfig>
      break;
 8004294:	e003      	b.n	800429e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
      break;
 800429a:	e000      	b.n	800429e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800429c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a3a      	ldr	r2, [pc, #232]	@ (8004418 <TIM_Base_SetConfig+0xfc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00f      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800433a:	d00b      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a37      	ldr	r2, [pc, #220]	@ (800441c <TIM_Base_SetConfig+0x100>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d007      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a36      	ldr	r2, [pc, #216]	@ (8004420 <TIM_Base_SetConfig+0x104>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a35      	ldr	r2, [pc, #212]	@ (8004424 <TIM_Base_SetConfig+0x108>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d108      	bne.n	8004366 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800435a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2b      	ldr	r2, [pc, #172]	@ (8004418 <TIM_Base_SetConfig+0xfc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01b      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004374:	d017      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a28      	ldr	r2, [pc, #160]	@ (800441c <TIM_Base_SetConfig+0x100>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a27      	ldr	r2, [pc, #156]	@ (8004420 <TIM_Base_SetConfig+0x104>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00f      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a26      	ldr	r2, [pc, #152]	@ (8004424 <TIM_Base_SetConfig+0x108>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00b      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a25      	ldr	r2, [pc, #148]	@ (8004428 <TIM_Base_SetConfig+0x10c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d007      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a24      	ldr	r2, [pc, #144]	@ (800442c <TIM_Base_SetConfig+0x110>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a23      	ldr	r2, [pc, #140]	@ (8004430 <TIM_Base_SetConfig+0x114>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d108      	bne.n	80043b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a0e      	ldr	r2, [pc, #56]	@ (8004418 <TIM_Base_SetConfig+0xfc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d103      	bne.n	80043ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d105      	bne.n	800440a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f023 0201 	bic.w	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	611a      	str	r2, [r3, #16]
  }
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40010000 	.word	0x40010000
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40014000 	.word	0x40014000
 800442c:	40014400 	.word	0x40014400
 8004430:	40014800 	.word	0x40014800

08004434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 0201 	bic.w	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800445e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f023 030a 	bic.w	r3, r3, #10
 8004470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004492:	b480      	push	{r7}
 8004494:	b087      	sub	sp, #28
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f023 0210 	bic.w	r2, r3, #16
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	031b      	lsls	r3, r3, #12
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	621a      	str	r2, [r3, #32]
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004508:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	f043 0307 	orr.w	r3, r3, #7
 8004514:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	609a      	str	r2, [r3, #8]
}
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	021a      	lsls	r2, r3, #8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	431a      	orrs	r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4313      	orrs	r3, r2
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	609a      	str	r2, [r3, #8]
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800457c:	2302      	movs	r3, #2
 800457e:	e050      	b.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1c      	ldr	r2, [pc, #112]	@ (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d018      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045cc:	d013      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a18      	ldr	r2, [pc, #96]	@ (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00e      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a16      	ldr	r2, [pc, #88]	@ (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d009      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a15      	ldr	r2, [pc, #84]	@ (800463c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d004      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a13      	ldr	r2, [pc, #76]	@ (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10c      	bne.n	8004610 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	4313      	orrs	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40010000 	.word	0x40010000
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800
 800463c:	40000c00 	.word	0x40000c00
 8004640:	40014000 	.word	0x40014000

08004644 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e042      	b.n	8004704 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fe faca 	bl	8002c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	@ 0x24
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fcdb 	bl	800506c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	4613      	mov	r3, r2
 8004718:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b20      	cmp	r3, #32
 8004724:	d112      	bne.n	800474c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_UART_Receive_IT+0x26>
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e00b      	b.n	800474e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	461a      	mov	r2, r3
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 faba 	bl	8004cbc <UART_Start_Receive_IT>
 8004748:	4603      	mov	r3, r0
 800474a:	e000      	b.n	800474e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800474c:	2302      	movs	r3, #2
  }
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b0ba      	sub	sp, #232	@ 0xe8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800477e:	2300      	movs	r3, #0
 8004780:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004784:	2300      	movs	r3, #0
 8004786:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800478a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10f      	bne.n	80047be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800479e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d009      	beq.n	80047be <HAL_UART_IRQHandler+0x66>
 80047aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fb99 	bl	8004eee <UART_Receive_IT>
      return;
 80047bc:	e25b      	b.n	8004c76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80de 	beq.w	8004984 <HAL_UART_IRQHandler+0x22c>
 80047c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80d1 	beq.w	8004984 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <HAL_UART_IRQHandler+0xae>
 80047ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fe:	f043 0201 	orr.w	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <HAL_UART_IRQHandler+0xd2>
 8004812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004822:	f043 0202 	orr.w	r2, r3, #2
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800482a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <HAL_UART_IRQHandler+0xf6>
 8004836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004846:	f043 0204 	orr.w	r2, r3, #4
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d011      	beq.n	800487e <HAL_UART_IRQHandler+0x126>
 800485a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d105      	bne.n	8004872 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004876:	f043 0208 	orr.w	r2, r3, #8
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 81f2 	beq.w	8004c6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_UART_IRQHandler+0x14e>
 8004894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fb24 	bl	8004eee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b0:	2b40      	cmp	r3, #64	@ 0x40
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d103      	bne.n	80048d2 <HAL_UART_IRQHandler+0x17a>
 80048ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d04f      	beq.n	8004972 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa2c 	bl	8004d30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e2:	2b40      	cmp	r3, #64	@ 0x40
 80048e4:	d141      	bne.n	800496a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3314      	adds	r3, #20
 80048ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80048fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3314      	adds	r3, #20
 800490e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004912:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800491e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800492a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1d9      	bne.n	80048e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d013      	beq.n	8004962 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b38 <HAL_UART_IRQHandler+0x3e0>)
 8004940:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe fc57 	bl	80031fa <HAL_DMA_Abort_IT>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d016      	beq.n	8004980 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800495c:	4610      	mov	r0, r2
 800495e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004960:	e00e      	b.n	8004980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f994 	bl	8004c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004968:	e00a      	b.n	8004980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f990 	bl	8004c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004970:	e006      	b.n	8004980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f98c 	bl	8004c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800497e:	e175      	b.n	8004c6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004980:	bf00      	nop
    return;
 8004982:	e173      	b.n	8004c6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004988:	2b01      	cmp	r3, #1
 800498a:	f040 814f 	bne.w	8004c2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 8148 	beq.w	8004c2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800499c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8141 	beq.w	8004c2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049aa:	2300      	movs	r3, #0
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ca:	2b40      	cmp	r3, #64	@ 0x40
 80049cc:	f040 80b6 	bne.w	8004b3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8145 	beq.w	8004c70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049ee:	429a      	cmp	r2, r3
 80049f0:	f080 813e 	bcs.w	8004c70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a06:	f000 8088 	beq.w	8004b1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004a36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1d9      	bne.n	8004a0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3314      	adds	r3, #20
 8004a5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a60:	e853 3f00 	ldrex	r3, [r3]
 8004a64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a68:	f023 0301 	bic.w	r3, r3, #1
 8004a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3314      	adds	r3, #20
 8004a76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a86:	e841 2300 	strex	r3, r2, [r1]
 8004a8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1e1      	bne.n	8004a56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3314      	adds	r3, #20
 8004a98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a9c:	e853 3f00 	ldrex	r3, [r3]
 8004aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004aa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3314      	adds	r3, #20
 8004ab2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ab6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004abc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e3      	bne.n	8004a92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	330c      	adds	r3, #12
 8004ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004aea:	f023 0310 	bic.w	r3, r3, #16
 8004aee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004afc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004afe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e3      	bne.n	8004ad8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fe fb00 	bl	800311a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f8b7 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b36:	e09b      	b.n	8004c70 <HAL_UART_IRQHandler+0x518>
 8004b38:	08004df7 	.word	0x08004df7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 808e 	beq.w	8004c74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8089 	beq.w	8004c74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	330c      	adds	r3, #12
 8004b68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004b86:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e3      	bne.n	8004b62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3314      	adds	r3, #20
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3314      	adds	r3, #20
 8004bba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004bbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1e3      	bne.n	8004b9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	330c      	adds	r3, #12
 8004be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	e853 3f00 	ldrex	r3, [r3]
 8004bee:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0310 	bic.w	r3, r3, #16
 8004bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004c04:	61fa      	str	r2, [r7, #28]
 8004c06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c08:	69b9      	ldr	r1, [r7, #24]
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	e841 2300 	strex	r3, r2, [r1]
 8004c10:	617b      	str	r3, [r7, #20]
   return(result);
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1e3      	bne.n	8004be0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c22:	4619      	mov	r1, r3
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f83d 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c2a:	e023      	b.n	8004c74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d009      	beq.n	8004c4c <HAL_UART_IRQHandler+0x4f4>
 8004c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f8ea 	bl	8004e1e <UART_Transmit_IT>
    return;
 8004c4a:	e014      	b.n	8004c76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00e      	beq.n	8004c76 <HAL_UART_IRQHandler+0x51e>
 8004c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f92a 	bl	8004ebe <UART_EndTransmit_IT>
    return;
 8004c6a:	e004      	b.n	8004c76 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c6c:	bf00      	nop
 8004c6e:	e002      	b.n	8004c76 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c70:	bf00      	nop
 8004c72:	e000      	b.n	8004c76 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c74:	bf00      	nop
  }
}
 8004c76:	37e8      	adds	r7, #232	@ 0xe8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	88fa      	ldrh	r2, [r7, #6]
 8004cd4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	88fa      	ldrh	r2, [r7, #6]
 8004cda:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2222      	movs	r2, #34	@ 0x22
 8004ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d00:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0201 	orr.w	r2, r2, #1
 8004d10:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0220 	orr.w	r2, r2, #32
 8004d20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b095      	sub	sp, #84	@ 0x54
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d58:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e5      	bne.n	8004d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3314      	adds	r3, #20
 8004d72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f023 0301 	bic.w	r3, r3, #1
 8004d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3314      	adds	r3, #20
 8004d8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e5      	bne.n	8004d6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d119      	bne.n	8004ddc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	330c      	adds	r3, #12
 8004dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f023 0310 	bic.w	r3, r3, #16
 8004dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dc8:	61ba      	str	r2, [r7, #24]
 8004dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6979      	ldr	r1, [r7, #20]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e5      	bne.n	8004da8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004dea:	bf00      	nop
 8004dec:	3754      	adds	r7, #84	@ 0x54
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7ff ff3d 	bl	8004c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b21      	cmp	r3, #33	@ 0x21
 8004e30:	d13e      	bne.n	8004eb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e3a:	d114      	bne.n	8004e66 <UART_Transmit_IT+0x48>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d110      	bne.n	8004e66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	1c9a      	adds	r2, r3, #2
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	621a      	str	r2, [r3, #32]
 8004e64:	e008      	b.n	8004e78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	1c59      	adds	r1, r3, #1
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6211      	str	r1, [r2, #32]
 8004e70:	781a      	ldrb	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	4619      	mov	r1, r3
 8004e86:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10f      	bne.n	8004eac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004eaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e000      	b.n	8004eb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004eb0:	2302      	movs	r3, #2
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ed4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff fecc 	bl	8004c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b08c      	sub	sp, #48	@ 0x30
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b22      	cmp	r3, #34	@ 0x22
 8004f00:	f040 80ae 	bne.w	8005060 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f0c:	d117      	bne.n	8004f3e <UART_Receive_IT+0x50>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d113      	bne.n	8004f3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f36:	1c9a      	adds	r2, r3, #2
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f3c:	e026      	b.n	8004f8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f50:	d007      	beq.n	8004f62 <UART_Receive_IT+0x74>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <UART_Receive_IT+0x82>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e008      	b.n	8004f82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d15d      	bne.n	800505c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0220 	bic.w	r2, r2, #32
 8004fae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d135      	bne.n	8005052 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f023 0310 	bic.w	r3, r3, #16
 8005002:	627b      	str	r3, [r7, #36]	@ 0x24
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500c:	623a      	str	r2, [r7, #32]
 800500e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	69f9      	ldr	r1, [r7, #28]
 8005012:	6a3a      	ldr	r2, [r7, #32]
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	61bb      	str	r3, [r7, #24]
   return(result);
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e5      	bne.n	8004fec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	2b10      	cmp	r3, #16
 800502c:	d10a      	bne.n	8005044 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff fe2a 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
 8005050:	e002      	b.n	8005058 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fd fd46 	bl	8002ae4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005058:	2300      	movs	r3, #0
 800505a:	e002      	b.n	8005062 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	e000      	b.n	8005062 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005060:	2302      	movs	r3, #2
  }
}
 8005062:	4618      	mov	r0, r3
 8005064:	3730      	adds	r7, #48	@ 0x30
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800506c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005070:	b0c0      	sub	sp, #256	@ 0x100
 8005072:	af00      	add	r7, sp, #0
 8005074:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005088:	68d9      	ldr	r1, [r3, #12]
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	ea40 0301 	orr.w	r3, r0, r1
 8005094:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80050c4:	f021 010c 	bic.w	r1, r1, #12
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80050d2:	430b      	orrs	r3, r1
 80050d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80050e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e6:	6999      	ldr	r1, [r3, #24]
 80050e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	ea40 0301 	orr.w	r3, r0, r1
 80050f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b8f      	ldr	r3, [pc, #572]	@ (8005338 <UART_SetConfig+0x2cc>)
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d005      	beq.n	800510c <UART_SetConfig+0xa0>
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4b8d      	ldr	r3, [pc, #564]	@ (800533c <UART_SetConfig+0x2d0>)
 8005108:	429a      	cmp	r2, r3
 800510a:	d104      	bne.n	8005116 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800510c:	f7fe feba 	bl	8003e84 <HAL_RCC_GetPCLK2Freq>
 8005110:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005114:	e003      	b.n	800511e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005116:	f7fe fea1 	bl	8003e5c <HAL_RCC_GetPCLK1Freq>
 800511a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005128:	f040 810c 	bne.w	8005344 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800512c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005130:	2200      	movs	r2, #0
 8005132:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005136:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800513a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800513e:	4622      	mov	r2, r4
 8005140:	462b      	mov	r3, r5
 8005142:	1891      	adds	r1, r2, r2
 8005144:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005146:	415b      	adcs	r3, r3
 8005148:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800514a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800514e:	4621      	mov	r1, r4
 8005150:	eb12 0801 	adds.w	r8, r2, r1
 8005154:	4629      	mov	r1, r5
 8005156:	eb43 0901 	adc.w	r9, r3, r1
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005166:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800516a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800516e:	4690      	mov	r8, r2
 8005170:	4699      	mov	r9, r3
 8005172:	4623      	mov	r3, r4
 8005174:	eb18 0303 	adds.w	r3, r8, r3
 8005178:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800517c:	462b      	mov	r3, r5
 800517e:	eb49 0303 	adc.w	r3, r9, r3
 8005182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005192:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005196:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800519a:	460b      	mov	r3, r1
 800519c:	18db      	adds	r3, r3, r3
 800519e:	653b      	str	r3, [r7, #80]	@ 0x50
 80051a0:	4613      	mov	r3, r2
 80051a2:	eb42 0303 	adc.w	r3, r2, r3
 80051a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80051a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80051ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80051b0:	f7fb f822 	bl	80001f8 <__aeabi_uldivmod>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4b61      	ldr	r3, [pc, #388]	@ (8005340 <UART_SetConfig+0x2d4>)
 80051ba:	fba3 2302 	umull	r2, r3, r3, r2
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	011c      	lsls	r4, r3, #4
 80051c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80051d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80051d4:	4642      	mov	r2, r8
 80051d6:	464b      	mov	r3, r9
 80051d8:	1891      	adds	r1, r2, r2
 80051da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80051dc:	415b      	adcs	r3, r3
 80051de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051e4:	4641      	mov	r1, r8
 80051e6:	eb12 0a01 	adds.w	sl, r2, r1
 80051ea:	4649      	mov	r1, r9
 80051ec:	eb43 0b01 	adc.w	fp, r3, r1
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005200:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005204:	4692      	mov	sl, r2
 8005206:	469b      	mov	fp, r3
 8005208:	4643      	mov	r3, r8
 800520a:	eb1a 0303 	adds.w	r3, sl, r3
 800520e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005212:	464b      	mov	r3, r9
 8005214:	eb4b 0303 	adc.w	r3, fp, r3
 8005218:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005228:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800522c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005230:	460b      	mov	r3, r1
 8005232:	18db      	adds	r3, r3, r3
 8005234:	643b      	str	r3, [r7, #64]	@ 0x40
 8005236:	4613      	mov	r3, r2
 8005238:	eb42 0303 	adc.w	r3, r2, r3
 800523c:	647b      	str	r3, [r7, #68]	@ 0x44
 800523e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005242:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005246:	f7fa ffd7 	bl	80001f8 <__aeabi_uldivmod>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4611      	mov	r1, r2
 8005250:	4b3b      	ldr	r3, [pc, #236]	@ (8005340 <UART_SetConfig+0x2d4>)
 8005252:	fba3 2301 	umull	r2, r3, r3, r1
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	2264      	movs	r2, #100	@ 0x64
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	1acb      	subs	r3, r1, r3
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005266:	4b36      	ldr	r3, [pc, #216]	@ (8005340 <UART_SetConfig+0x2d4>)
 8005268:	fba3 2302 	umull	r2, r3, r3, r2
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005274:	441c      	add	r4, r3
 8005276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800527a:	2200      	movs	r2, #0
 800527c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005280:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005284:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005288:	4642      	mov	r2, r8
 800528a:	464b      	mov	r3, r9
 800528c:	1891      	adds	r1, r2, r2
 800528e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005290:	415b      	adcs	r3, r3
 8005292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005294:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005298:	4641      	mov	r1, r8
 800529a:	1851      	adds	r1, r2, r1
 800529c:	6339      	str	r1, [r7, #48]	@ 0x30
 800529e:	4649      	mov	r1, r9
 80052a0:	414b      	adcs	r3, r1
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80052b0:	4659      	mov	r1, fp
 80052b2:	00cb      	lsls	r3, r1, #3
 80052b4:	4651      	mov	r1, sl
 80052b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ba:	4651      	mov	r1, sl
 80052bc:	00ca      	lsls	r2, r1, #3
 80052be:	4610      	mov	r0, r2
 80052c0:	4619      	mov	r1, r3
 80052c2:	4603      	mov	r3, r0
 80052c4:	4642      	mov	r2, r8
 80052c6:	189b      	adds	r3, r3, r2
 80052c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052cc:	464b      	mov	r3, r9
 80052ce:	460a      	mov	r2, r1
 80052d0:	eb42 0303 	adc.w	r3, r2, r3
 80052d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80052e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052ec:	460b      	mov	r3, r1
 80052ee:	18db      	adds	r3, r3, r3
 80052f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052f2:	4613      	mov	r3, r2
 80052f4:	eb42 0303 	adc.w	r3, r2, r3
 80052f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005302:	f7fa ff79 	bl	80001f8 <__aeabi_uldivmod>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4b0d      	ldr	r3, [pc, #52]	@ (8005340 <UART_SetConfig+0x2d4>)
 800530c:	fba3 1302 	umull	r1, r3, r3, r2
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	2164      	movs	r1, #100	@ 0x64
 8005314:	fb01 f303 	mul.w	r3, r1, r3
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	3332      	adds	r3, #50	@ 0x32
 800531e:	4a08      	ldr	r2, [pc, #32]	@ (8005340 <UART_SetConfig+0x2d4>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	f003 0207 	and.w	r2, r3, #7
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4422      	add	r2, r4
 8005332:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005334:	e106      	b.n	8005544 <UART_SetConfig+0x4d8>
 8005336:	bf00      	nop
 8005338:	40011000 	.word	0x40011000
 800533c:	40011400 	.word	0x40011400
 8005340:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005348:	2200      	movs	r2, #0
 800534a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800534e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005352:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005356:	4642      	mov	r2, r8
 8005358:	464b      	mov	r3, r9
 800535a:	1891      	adds	r1, r2, r2
 800535c:	6239      	str	r1, [r7, #32]
 800535e:	415b      	adcs	r3, r3
 8005360:	627b      	str	r3, [r7, #36]	@ 0x24
 8005362:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005366:	4641      	mov	r1, r8
 8005368:	1854      	adds	r4, r2, r1
 800536a:	4649      	mov	r1, r9
 800536c:	eb43 0501 	adc.w	r5, r3, r1
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	00eb      	lsls	r3, r5, #3
 800537a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800537e:	00e2      	lsls	r2, r4, #3
 8005380:	4614      	mov	r4, r2
 8005382:	461d      	mov	r5, r3
 8005384:	4643      	mov	r3, r8
 8005386:	18e3      	adds	r3, r4, r3
 8005388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800538c:	464b      	mov	r3, r9
 800538e:	eb45 0303 	adc.w	r3, r5, r3
 8005392:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80053b2:	4629      	mov	r1, r5
 80053b4:	008b      	lsls	r3, r1, #2
 80053b6:	4621      	mov	r1, r4
 80053b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053bc:	4621      	mov	r1, r4
 80053be:	008a      	lsls	r2, r1, #2
 80053c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80053c4:	f7fa ff18 	bl	80001f8 <__aeabi_uldivmod>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4b60      	ldr	r3, [pc, #384]	@ (8005550 <UART_SetConfig+0x4e4>)
 80053ce:	fba3 2302 	umull	r2, r3, r3, r2
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	011c      	lsls	r4, r3, #4
 80053d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80053e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80053e8:	4642      	mov	r2, r8
 80053ea:	464b      	mov	r3, r9
 80053ec:	1891      	adds	r1, r2, r2
 80053ee:	61b9      	str	r1, [r7, #24]
 80053f0:	415b      	adcs	r3, r3
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053f8:	4641      	mov	r1, r8
 80053fa:	1851      	adds	r1, r2, r1
 80053fc:	6139      	str	r1, [r7, #16]
 80053fe:	4649      	mov	r1, r9
 8005400:	414b      	adcs	r3, r1
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005410:	4659      	mov	r1, fp
 8005412:	00cb      	lsls	r3, r1, #3
 8005414:	4651      	mov	r1, sl
 8005416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800541a:	4651      	mov	r1, sl
 800541c:	00ca      	lsls	r2, r1, #3
 800541e:	4610      	mov	r0, r2
 8005420:	4619      	mov	r1, r3
 8005422:	4603      	mov	r3, r0
 8005424:	4642      	mov	r2, r8
 8005426:	189b      	adds	r3, r3, r2
 8005428:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800542c:	464b      	mov	r3, r9
 800542e:	460a      	mov	r2, r1
 8005430:	eb42 0303 	adc.w	r3, r2, r3
 8005434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005442:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005450:	4649      	mov	r1, r9
 8005452:	008b      	lsls	r3, r1, #2
 8005454:	4641      	mov	r1, r8
 8005456:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800545a:	4641      	mov	r1, r8
 800545c:	008a      	lsls	r2, r1, #2
 800545e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005462:	f7fa fec9 	bl	80001f8 <__aeabi_uldivmod>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4611      	mov	r1, r2
 800546c:	4b38      	ldr	r3, [pc, #224]	@ (8005550 <UART_SetConfig+0x4e4>)
 800546e:	fba3 2301 	umull	r2, r3, r3, r1
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	2264      	movs	r2, #100	@ 0x64
 8005476:	fb02 f303 	mul.w	r3, r2, r3
 800547a:	1acb      	subs	r3, r1, r3
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	3332      	adds	r3, #50	@ 0x32
 8005480:	4a33      	ldr	r2, [pc, #204]	@ (8005550 <UART_SetConfig+0x4e4>)
 8005482:	fba2 2303 	umull	r2, r3, r2, r3
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800548c:	441c      	add	r4, r3
 800548e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005492:	2200      	movs	r2, #0
 8005494:	673b      	str	r3, [r7, #112]	@ 0x70
 8005496:	677a      	str	r2, [r7, #116]	@ 0x74
 8005498:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800549c:	4642      	mov	r2, r8
 800549e:	464b      	mov	r3, r9
 80054a0:	1891      	adds	r1, r2, r2
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	415b      	adcs	r3, r3
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054ac:	4641      	mov	r1, r8
 80054ae:	1851      	adds	r1, r2, r1
 80054b0:	6039      	str	r1, [r7, #0]
 80054b2:	4649      	mov	r1, r9
 80054b4:	414b      	adcs	r3, r1
 80054b6:	607b      	str	r3, [r7, #4]
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	f04f 0300 	mov.w	r3, #0
 80054c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054c4:	4659      	mov	r1, fp
 80054c6:	00cb      	lsls	r3, r1, #3
 80054c8:	4651      	mov	r1, sl
 80054ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ce:	4651      	mov	r1, sl
 80054d0:	00ca      	lsls	r2, r1, #3
 80054d2:	4610      	mov	r0, r2
 80054d4:	4619      	mov	r1, r3
 80054d6:	4603      	mov	r3, r0
 80054d8:	4642      	mov	r2, r8
 80054da:	189b      	adds	r3, r3, r2
 80054dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054de:	464b      	mov	r3, r9
 80054e0:	460a      	mov	r2, r1
 80054e2:	eb42 0303 	adc.w	r3, r2, r3
 80054e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80054f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005500:	4649      	mov	r1, r9
 8005502:	008b      	lsls	r3, r1, #2
 8005504:	4641      	mov	r1, r8
 8005506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800550a:	4641      	mov	r1, r8
 800550c:	008a      	lsls	r2, r1, #2
 800550e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005512:	f7fa fe71 	bl	80001f8 <__aeabi_uldivmod>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4b0d      	ldr	r3, [pc, #52]	@ (8005550 <UART_SetConfig+0x4e4>)
 800551c:	fba3 1302 	umull	r1, r3, r3, r2
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	2164      	movs	r1, #100	@ 0x64
 8005524:	fb01 f303 	mul.w	r3, r1, r3
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	3332      	adds	r3, #50	@ 0x32
 800552e:	4a08      	ldr	r2, [pc, #32]	@ (8005550 <UART_SetConfig+0x4e4>)
 8005530:	fba2 2303 	umull	r2, r3, r2, r3
 8005534:	095b      	lsrs	r3, r3, #5
 8005536:	f003 020f 	and.w	r2, r3, #15
 800553a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4422      	add	r2, r4
 8005542:	609a      	str	r2, [r3, #8]
}
 8005544:	bf00      	nop
 8005546:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800554a:	46bd      	mov	sp, r7
 800554c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005550:	51eb851f 	.word	0x51eb851f

08005554 <memset>:
 8005554:	4402      	add	r2, r0
 8005556:	4603      	mov	r3, r0
 8005558:	4293      	cmp	r3, r2
 800555a:	d100      	bne.n	800555e <memset+0xa>
 800555c:	4770      	bx	lr
 800555e:	f803 1b01 	strb.w	r1, [r3], #1
 8005562:	e7f9      	b.n	8005558 <memset+0x4>

08005564 <strstr>:
 8005564:	780a      	ldrb	r2, [r1, #0]
 8005566:	b570      	push	{r4, r5, r6, lr}
 8005568:	b96a      	cbnz	r2, 8005586 <strstr+0x22>
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	429a      	cmp	r2, r3
 800556e:	d109      	bne.n	8005584 <strstr+0x20>
 8005570:	460c      	mov	r4, r1
 8005572:	4605      	mov	r5, r0
 8005574:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f6      	beq.n	800556a <strstr+0x6>
 800557c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005580:	429e      	cmp	r6, r3
 8005582:	d0f7      	beq.n	8005574 <strstr+0x10>
 8005584:	3001      	adds	r0, #1
 8005586:	7803      	ldrb	r3, [r0, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1ef      	bne.n	800556c <strstr+0x8>
 800558c:	4618      	mov	r0, r3
 800558e:	e7ec      	b.n	800556a <strstr+0x6>

08005590 <__libc_init_array>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	4d0d      	ldr	r5, [pc, #52]	@ (80055c8 <__libc_init_array+0x38>)
 8005594:	4c0d      	ldr	r4, [pc, #52]	@ (80055cc <__libc_init_array+0x3c>)
 8005596:	1b64      	subs	r4, r4, r5
 8005598:	10a4      	asrs	r4, r4, #2
 800559a:	2600      	movs	r6, #0
 800559c:	42a6      	cmp	r6, r4
 800559e:	d109      	bne.n	80055b4 <__libc_init_array+0x24>
 80055a0:	4d0b      	ldr	r5, [pc, #44]	@ (80055d0 <__libc_init_array+0x40>)
 80055a2:	4c0c      	ldr	r4, [pc, #48]	@ (80055d4 <__libc_init_array+0x44>)
 80055a4:	f000 f820 	bl	80055e8 <_init>
 80055a8:	1b64      	subs	r4, r4, r5
 80055aa:	10a4      	asrs	r4, r4, #2
 80055ac:	2600      	movs	r6, #0
 80055ae:	42a6      	cmp	r6, r4
 80055b0:	d105      	bne.n	80055be <__libc_init_array+0x2e>
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
 80055b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b8:	4798      	blx	r3
 80055ba:	3601      	adds	r6, #1
 80055bc:	e7ee      	b.n	800559c <__libc_init_array+0xc>
 80055be:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c2:	4798      	blx	r3
 80055c4:	3601      	adds	r6, #1
 80055c6:	e7f2      	b.n	80055ae <__libc_init_array+0x1e>
 80055c8:	080057d0 	.word	0x080057d0
 80055cc:	080057d0 	.word	0x080057d0
 80055d0:	080057d0 	.word	0x080057d0
 80055d4:	080057d4 	.word	0x080057d4

080055d8 <strcpy>:
 80055d8:	4603      	mov	r3, r0
 80055da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055de:	f803 2b01 	strb.w	r2, [r3], #1
 80055e2:	2a00      	cmp	r2, #0
 80055e4:	d1f9      	bne.n	80055da <strcpy+0x2>
 80055e6:	4770      	bx	lr

080055e8 <_init>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	bf00      	nop
 80055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ee:	bc08      	pop	{r3}
 80055f0:	469e      	mov	lr, r3
 80055f2:	4770      	bx	lr

080055f4 <_fini>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	bf00      	nop
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr
